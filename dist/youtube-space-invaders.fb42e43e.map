{"version":3,"sources":["src/constants/GameSettings.ts","src/constants/GameStates.ts","src/constants/KeyCodes.ts","src/util/Vectors.ts","src/gameObjects/Bullets.ts","src/gameObjects/Player.ts","src/gameObjects/PlayerBase.ts","src/util/Canvas2D_tools.ts","src/gameObjects/AbstractInvader.ts","src/util/Conversions.ts","src/gameObjects/Invaders.ts","src/util/MathChecks.ts","src/util/Formations.ts","src/story/WaveManager.ts","src/util/CollisionDetection.ts","src/agent/Interpreter.ts","src/SpaceInvaders.ts","index.js"],"names":["gameLoop","game","SpaceInvaders","document","querySelector","update","window","addEventListener","onKeyDown","bind","onKeyUp"],"mappings":"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","file":"youtube-space-invaders.fb42e43e.map","sourceRoot":"..","sourcesContent":["export const GAME_SPEED: number = 50 // the higher the number the faster the game will run, all movements are effected by this number\n\nexport const VERY_SLOW_MOVEMENT_SPEED: number = 1\nexport const SLOW_MOVEMENT_SPEED: number = 2\nexport const MEDIUM_MOVEMENT_SPEED: number = 4\nexport const FAST_MOVEMENT_SPEED: number = 6\nexport const VERY_FAST_MOVEMENT_SPEED: number = 12\n\nexport const MEDIUM_FONT_SIZE: number = 14\nexport const LARGE_FONT_SIZE: number = 20\n","export const INITIALISING = 'INITIALISING'\nexport const GAME_OVER = 'GAME_OVER'\nexport const BATTLE_MODE = 'BATTLE_MODE'\nexport const YOU_WIN = 'YOU_WIN'\n","export let KEY_CODES = {\n  RETURN: 13,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  ZERO: 48,\n  ONE: 49,\n  TWO: 50\n}\n","export class Dimensions2 {\n  constructor(public width: number, public height: number) {}\n}\n\nexport class Vector2 {\n  constructor(public x: number, public y: number) {}\n\n  public add(otherVector: Vector2): Vector2 {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y)\n  }\n\n  public addTwo(x: number, y: number): Vector2 {\n    return new Vector2(this.x + x, this.y + y)\n  }\n\n  public reverse(): Vector2 {\n    return new Vector2(-this.x, -this.y)\n  }\n\n  public magnitude(): number {\n    return Math.sqrt(this.x ** 2 + this.y ** 2)\n  }\n\n  public angle(): number {\n    return Math.atan2(this.y, this.x) - degreesToRadians(-90)\n  }\n\n  /**\n   * returns a new vector based on the current one rotated by an angle\n   * @param initialVector\n   * @param rotatingDegrees\n   * @returns {Vector2}\n   */\n  public rotateBy(radians: number): Vector2 {\n    let newAngleRads = Math.atan2(this.x, this.y) + radians\n    let mag = this.magnitude()\n    return new Vector2(mag * Math.sin(newAngleRads), mag * Math.cos(newAngleRads))\n  }\n}\n\nexport class Vector2Normalised extends Vector2 {\n  constructor(radians: number) {\n    super(Math.sin(radians), -Math.cos(radians))\n  }\n}\n\nexport function degreesToRadians(degrees: number): number {\n  return (degrees / 360) * 2 * Math.PI\n}\n\nexport function radiansToDegress(radians: number): number {\n  return (radians * 360) / (2 * Math.PI)\n}\n\n/**\n * Returns array of vectors equally spaced measured from both sidesfor the x origin in normal maths xy chart\n * the shooter will then modify based on its rotation of the firing gun\n */\nexport function getFanSpreadVectors(\n  numberOfBullets: number,\n  spreadAngleRadians: number\n): Array<Vector2Normalised> {\n  let arr: Array<Vector2Normalised> = []\n  let angleGap: number = spreadAngleRadians / numberOfBullets\n  let startingAngle: number = spreadAngleRadians / 2\n  for (let i = 0; i < numberOfBullets; i++) {\n    let nextAngle = startingAngle - i * angleGap\n    arr.push(new Vector2Normalised(nextAngle))\n  }\n  return arr\n}\n","import { SpaceInvaders } from '../SpaceInvaders'\nimport { Vector2, Dimensions2, Vector2Normalised } from '../util/Vectors'\nimport { IGameObject } from './IGameObject'\nimport * as GameSettings from '../constants/GameSettings'\n\nexport abstract class Bullet implements IGameObject {\n  static SMALL_SIZE: number = 3\n  static LARGE_SIZE: number = 9\n\n  color: any\n\n  dimensions: Dimensions2\n  damageInflicted: number\n  active: boolean = true\n  protected directionVector: Vector2Normalised\n\n  constructor(public position: Vector2, directionVector: Vector2Normalised) {\n    this.directionVector = directionVector\n  }\n\n  inBounds() {\n    return (\n      this.position.x >= 0 &&\n      this.position.x - this.dimensions.width <= SpaceInvaders.CANVAS_WIDTH &&\n      this.position.y >= 0 &&\n      this.position.y - this.dimensions.height <= SpaceInvaders.CANVAS_HEIGHT\n    )\n  }\n\n  abstract draw(canvas: CanvasRenderingContext2D)\n\n  abstract update(elapsedUnit)\n}\n\nexport class BasicBullet extends Bullet {\n  constructor(public position: Vector2, directionVector: Vector2Normalised) {\n    super(position, directionVector)\n    this.dimensions = new Dimensions2(Bullet.SMALL_SIZE, Bullet.SMALL_SIZE)\n    this.color = 'white'\n    this.damageInflicted = 1\n  }\n\n  draw(canvas: CanvasRenderingContext2D) {\n    canvas.fillStyle = this.color\n    canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height)\n  }\n\n  update(elapsedUnit) {\n    this.position.x += this.directionVector.x * elapsedUnit * GameSettings.MEDIUM_MOVEMENT_SPEED\n    this.position.y += this.directionVector.y * elapsedUnit * GameSettings.MEDIUM_MOVEMENT_SPEED\n    this.active = this.active && this.inBounds()\n  }\n}\n","import { IGameObject } from './IGameObject'\nimport { Vector2, Dimensions2, Vector2Normalised } from '../util/Vectors'\nimport { Bullet, BasicBullet } from './Bullets'\nimport { MEDIUM_MOVEMENT_SPEED } from '../constants/GameSettings'\nimport { GAME_OVER } from '../constants/GameStates'\nimport { SpaceInvaders } from '../SpaceInvaders'\n\nexport class Player implements IGameObject {\n  static DEFAULT_HEIGHT: number = 30\n  static DEFAULT_WIDTH: number = 60\n  color: string = '#0FF'\n  position: Vector2\n\n  dimensions: Dimensions2 = new Dimensions2(Player.DEFAULT_WIDTH, Player.DEFAULT_HEIGHT)\n  health: number = 3\n\n  lastShotTime: number = 0\n  fireRatePerSec = 4\n\n  private directionVector: Vector2 = new Vector2(0, 0)\n\n  constructor(position) {\n    this.position = position\n  }\n\n  draw(context2D: CanvasRenderingContext2D) {\n    context2D.drawImage(img, this.position.x, this.position.y)\n  }\n\n  update(elapsedUnit) {\n    this.position.x += this.directionVector.x * elapsedUnit * MEDIUM_MOVEMENT_SPEED\n    this.position.y += this.directionVector.y * elapsedUnit * MEDIUM_MOVEMENT_SPEED\n  }\n\n  midpoint() {\n    return new Vector2(\n      this.position.x + this.dimensions.width / 2,\n      this.position.y + this.dimensions.height / 2\n    )\n  }\n\n  explode() {\n    SpaceInvaders.gameState = GAME_OVER\n    let myAudio = document.createElement('audio')\n\n    // todo\n    // myAudio.src = require('file?name=playerExplosion.mp3!../audio/playerExplosion.mp3')\n    // myAudio.play()\n  }\n\n  shootAhead(): Bullet {\n    // todo Sound.play('shoot')\n    let timeDifference = new Date().getTime() - this.lastShotTime\n    if (timeDifference > 1000 / this.fireRatePerSec) {\n      this.lastShotTime = new Date().getTime()\n      return new BasicBullet(this.midpoint(), new Vector2Normalised(0))\n    } else {\n      return null\n    }\n  }\n\n  updateDirection(directionVector: Vector2Normalised) {\n    this.directionVector = directionVector\n  }\n\n  remainStationary() {\n    this.directionVector.x = 0\n    this.directionVector.y = 0\n  }\n\n  takeDamage(bullet: Bullet) {\n    this.health -= bullet.damageInflicted\n    if (this.health <= 0) {\n      this.explode()\n    }\n  }\n}\n\nlet img = new Image()\nimg.src = require('../images/player.svg')\n","import { IGameObject } from './IGameObject'\nimport { Vector2, Dimensions2 } from '../util/Vectors'\n\nexport class DestructibleScenery implements IGameObject {\n  static DEFAULT_SIZE: number = 5\n  position: Vector2\n  dimensions: Dimensions2 = new Dimensions2(\n    DestructibleScenery.DEFAULT_SIZE,\n    DestructibleScenery.DEFAULT_SIZE\n  )\n  color: string = '#0F9'\n  active: boolean = true\n\n  constructor(position) {\n    this.position = position\n  }\n\n  draw(canvas: CanvasRenderingContext2D) {\n    canvas.fillStyle = this.color\n    if (this.active) {\n      canvas.fillRect(\n        this.position.x,\n        this.position.y,\n        this.dimensions.width,\n        this.dimensions.height\n      )\n    }\n  }\n\n  // tslint:disable-next-line\n  update(elapsedUnit) {}\n\n  explode() {\n    this.active = false\n    // todo boom graphic\n  }\n}\n\n/**\n * The classic Green protective bases the player can hide behind\n */\nexport class PlayerBase {\n  allDestructibleScenery: DestructibleScenery[] = []\n  actualDimensions: Vector2\n\n  constructor(public requestedDimensions: Vector2) {\n    let numberPerRow = Math.floor(requestedDimensions.x / DestructibleScenery.DEFAULT_SIZE)\n    let numberPerColumn = Math.floor(requestedDimensions.y / DestructibleScenery.DEFAULT_SIZE)\n\n    this.actualDimensions = new Vector2(\n      numberPerRow * DestructibleScenery.DEFAULT_SIZE,\n      numberPerColumn * DestructibleScenery.DEFAULT_SIZE\n    )\n\n    let nextPosition\n    // just rectangular bases to start with\n    // todo mask values to give shapes like the original space invaders bases\n    for (let i = 0; i < numberPerRow; i++) {\n      nextPosition = new Vector2(DestructibleScenery.DEFAULT_SIZE * i, 0)\n      for (let j = 0; j < numberPerColumn; j++) {\n        nextPosition = nextPosition.addTwo(0, DestructibleScenery.DEFAULT_SIZE)\n        this.allDestructibleScenery.push(new DestructibleScenery(nextPosition))\n      }\n    }\n  }\n\n  draw(canvas: CanvasRenderingContext2D) {\n    this.allDestructibleScenery.forEach((item: DestructibleScenery) => {\n      item.draw(canvas)\n    })\n  }\n\n  transform(position: Vector2) {\n    this.allDestructibleScenery.forEach(function(item: DestructibleScenery) {\n      item.position = item.position.add(position)\n    })\n  }\n}\n","import * as GameMath from './Vectors'\n\nexport function rotateAndPaintImage(\n  context,\n  image,\n  angleInDegrees,\n  positionX,\n  positionY,\n  axisX,\n  axisY\n) {\n  let angleInRadians = GameMath.degreesToRadians(angleInDegrees)\n  context.translate(positionX, positionY)\n  context.rotate(angleInRadians)\n  context.drawImage(image, -axisX, -axisY)\n  context.rotate(-angleInRadians)\n  context.translate(-positionX, -positionY)\n}\n","import { Vector2, Dimensions2, Vector2Normalised } from '../util/Vectors'\nimport { IGameObject } from './IGameObject'\nimport { Bullet, BasicBullet } from './Bullets'\nimport * as GameSettings from '../constants/GameSettings'\nimport { SpaceInvaders } from '../SpaceInvaders'\nimport { rotateAndPaintImage } from '../util/Canvas2D_tools'\n\nexport abstract class AbstractInvader implements IGameObject {\n  static DEFAULT_HEIGHT: number = 20\n  static DEFAULT_WIDTH: number = 30\n  health: number = 1\n\n  dimensions: Dimensions2 = new Dimensions2(\n    AbstractInvader.DEFAULT_WIDTH,\n    AbstractInvader.DEFAULT_HEIGHT\n  )\n\n  active: boolean = true\n  probabilityOfShooting: number = 0.0005 // on each game frame\n  rotationInDegrees: number = 180 // todo this will change\n\n  image: any = new Image()\n  BasicColor: string\n  pointsValue: number\n  protected directionVector: Vector2 = new Vector2(0, 0)\n  protected facingAngleRad: number = Math.PI // pointing down for now\n\n  constructor(public position: Vector2) {}\n\n  draw(ctx: CanvasRenderingContext2D) {\n    rotateAndPaintImage(\n      ctx,\n      this.image,\n      180,\n      this.position.x,\n      this.position.y,\n      this.dimensions.width,\n      this.dimensions.height\n    )\n  }\n\n  midpoint() {\n    return new Vector2(\n      this.position.x + this.dimensions.width / 2,\n      this.position.y + this.dimensions.height / 2\n    )\n  }\n\n  explode() {\n    this.active = false\n    SpaceInvaders.score += this.pointsValue\n    // todo boom graphic\n  }\n\n  reverse() {\n    this.directionVector.x = -this.directionVector.x\n    this.directionVector.y = -this.directionVector.y\n    // todo boom graphic\n  }\n\n  updateDirection(directionVector: Vector2Normalised) {\n    this.directionVector = directionVector\n  }\n\n  update(elapsedUnit) {\n    this.position.x += this.directionVector.x * elapsedUnit * GameSettings.VERY_SLOW_MOVEMENT_SPEED\n  }\n\n  public shootAhead(): Array<Bullet> {\n    // todo Sound.play('shoot')\n    return [new BasicBullet(this.midpoint(), new Vector2(0, 1))]\n  }\n\n  takeHit(bullet: Bullet) {\n    this.health -= bullet.damageInflicted\n    if (this.health <= 0) {\n      this.explode()\n    }\n  }\n}\n","export function degreesToRadians(degrees: number): number {\n  return (degrees / 360) * 2 * Math.PI\n}\n\nexport function radiansToDegress(radians: number): number {\n  return (radians * 360) / (2 * Math.PI)\n}\n","import { Vector2, Dimensions2, Vector2Normalised, getFanSpreadVectors } from '../util/Vectors'\nimport { Bullet, BasicBullet } from './Bullets'\nimport { AbstractInvader } from './AbstractInvader'\nimport { degreesToRadians } from '../util/Conversions'\n\nexport class LightInvader extends AbstractInvader {\n  constructor(position: Vector2 = new Vector2(0, 0)) {\n    super(position)\n    this.probabilityOfShooting = 0.001\n    this.health = 1\n    this.pointsValue = 10\n\n    this.image.src = require('../images/lightInvader.svg')\n  }\n}\n\nexport class MediumInvader extends AbstractInvader {\n  constructor(position: Vector2 = new Vector2(0, 0)) {\n    super(position)\n    this.probabilityOfShooting = 0.002\n    this.health = 3\n    this.pointsValue = 30\n\n    this.image.src = require('../images/MediumInvader.svg')\n  }\n}\nexport class HeavyInvader extends AbstractInvader {\n  constructor(position: Vector2 = new Vector2(0, 0)) {\n    super(position)\n    this.probabilityOfShooting = 0.004\n    this.pointsValue = 60\n\n    this.health = 5\n    this.image.src = require('../images/HeavyInvader.svg')\n  }\n\n  public shootAhead(): Array<Bullet> {\n    // todo Sound.play('shoot')\n\n    let self = this\n    let x = Math.random()\n\n    if (x >= 0 && x <= 0.75) {\n      return [new BasicBullet(this.midpoint(), new Vector2Normalised(0))]\n    } else {\n      let vectors = getFanSpreadVectors(10, degreesToRadians(45))\n      let bulletsToFire: Array<Bullet> = []\n      vectors.forEach(item => {\n        let b = new BasicBullet(\n          this.midpoint(),\n          new Vector2Normalised(this.facingAngleRad + item.angle())\n        )\n        bulletsToFire.push(b)\n      })\n      return bulletsToFire\n    }\n  }\n}\n","export function isSquare(n) {\n  return n > 0 && Math.sqrt(n) % 1 === 0\n}\n","import { IGameObject } from '../gameObjects/IGameObject'\nimport { isSquare } from './MathChecks'\nimport { Vector2 } from './Vectors'\n\n/**\n * modifys an array of objects so their position is in a triangle\n *\n * let row number = n\n * each row contains (n*2)-1\n *\n * total rows = n^2\n * must be a perfect square of units\n * we render each unit from the bottom left\n *\n * looks like:\n *     1\n *    111\n *   11111\n *  1111111\n *\n * @param gameObjects\n */\nexport function triangle(\n  gameObjects: Array<IGameObject>,\n  horizontalGap: number,\n  verticalGap: number\n): void {\n  if (!isSquare(gameObjects.length)) {\n    throw new Error('needs perfect square number of units')\n  }\n  let numberOfRows = Math.sqrt(gameObjects.length)\n\n  let nextRowOffset = new Vector2(0, 0)\n  let thisRowStartingIndex = 0\n\n  for (let i = numberOfRows; i >= 1; i--) {\n    let numberOnThisRow = i * 2 - 1\n    let maxHeight: number = 0\n    for (let j = 0; j < numberOnThisRow; j++) {\n      let go = gameObjects[thisRowStartingIndex + j]\n      if (go.dimensions.height > maxHeight) {\n        maxHeight = go.dimensions.height\n      }\n      go.position = new Vector2(\n        j * (go.dimensions.width + horizontalGap) + nextRowOffset.x,\n        nextRowOffset.y\n      )\n    }\n\n    nextRowOffset = nextRowOffset.addTwo(\n      gameObjects[thisRowStartingIndex].dimensions.width + horizontalGap,\n      maxHeight + verticalGap\n    )\n    thisRowStartingIndex = thisRowStartingIndex + numberOnThisRow\n  }\n}\n\nexport function rectangle(\n  gameObjects: Array<IGameObject>,\n  itemsPerRow,\n  horizontalGap: number,\n  verticalGap: number\n): void {\n  let numberOfRows = gameObjects.length / itemsPerRow\n\n  if (numberOfRows % 1 !== 0) {\n    throw new Error('number / itemsPerRow must fit')\n  }\n\n  let nextRowOffset = new Vector2(0, 0)\n  let thisRowStartingIndex = 0\n\n  for (let i = 0; i < numberOfRows; i++) {\n    let maxHeight: number = 0\n    for (let j = 0; j < itemsPerRow; j++) {\n      let go = gameObjects[thisRowStartingIndex + j]\n      if (go.dimensions.height > maxHeight) {\n        maxHeight = go.dimensions.height\n      }\n      go.position = new Vector2(\n        j * (go.dimensions.width + horizontalGap) + nextRowOffset.x,\n        nextRowOffset.y\n      )\n    }\n\n    nextRowOffset = nextRowOffset.addTwo(0, maxHeight + verticalGap)\n    thisRowStartingIndex = thisRowStartingIndex + itemsPerRow\n  }\n}\n","import { LightInvader, MediumInvader, HeavyInvader } from '../gameObjects/Invaders'\nimport { Vector2, Vector2Normalised } from '../util/Vectors'\nimport { AbstractInvader } from '../gameObjects/AbstractInvader'\nimport { triangle, rectangle } from '../util/Formations'\n\nexport class WaveManager {\n  waves: Array<() => Array<AbstractInvader>> = []\n  currentWave = 0\n\n  constructor () {\n    this.generateWaves()\n  }\n\n  public getNextWave (): Array<AbstractInvader> {\n    let nextWave = this.waves[this.currentWave]\n    if (nextWave) {\n      this.currentWave++\n      return nextWave()\n    }\n    return null\n  }\n\n  private generateWaves () {\n\n    let horizontalGap = 15\n    let verticalGap = 20\n    let initialXOffset = 20\n    let initialYOffset = 20\n\n    this.waves.push(function () {\n\n      let units: Array<AbstractInvader> = [\n        new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader(),\n        new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader()\n      ]\n      units.forEach(unit => {\n        unit.updateDirection(new Vector2Normalised(90))\n      })\n      rectangle(units, 4, horizontalGap, verticalGap)\n      return units\n    })\n    this.waves.push(function () {\n\n      let units: Array<AbstractInvader> = [\n        new LightInvader(), new LightInvader(), new LightInvader(), new MediumInvader(), new MediumInvader(), new LightInvader(), new LightInvader(), new LightInvader(),\n        new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader(), new LightInvader()\n      ]\n      units.forEach(unit => {\n        unit.updateDirection(new Vector2Normalised(90))\n      })\n      rectangle(units, 8, horizontalGap, verticalGap)\n      return units\n    })\n\n    this.waves.push(function () {\n      let units: Array<AbstractInvader> = [\n        new LightInvader(), new MediumInvader(), new HeavyInvader(), new MediumInvader(), new LightInvader(),\n        new MediumInvader(), new MediumInvader(), new MediumInvader(),\n        new LightInvader()\n      ]\n      units.forEach(unit => {\n        unit.updateDirection(new Vector2Normalised(90))\n      })\n      triangle(units, horizontalGap, verticalGap)\n      return units\n    })\n    this.waves.push(function () {\n      let units: Array<AbstractInvader> = [\n        new LightInvader(), new MediumInvader(), new HeavyInvader(), new HeavyInvader(), new HeavyInvader(), new MediumInvader(), new LightInvader(),\n        new LightInvader(), new MediumInvader(), new HeavyInvader(), new MediumInvader(), new LightInvader(),\n        new LightInvader(), new MediumInvader(), new LightInvader(),\n        new LightInvader()\n      ]\n      units.forEach(unit => {\n        unit.updateDirection(new Vector2Normalised(90))\n      })\n      triangle(units, horizontalGap, verticalGap)\n      return units\n    })\n  }\n}\n","import { IGameObject } from '../gameObjects/IGameObject'\n\nexport function rectCollides(a: IGameObject, b: IGameObject) {\n  return (\n    a.position.x < b.position.x + b.dimensions.width &&\n    a.position.x + a.dimensions.width > b.position.x &&\n    a.position.y < b.position.y + b.dimensions.height &&\n    a.position.y + a.dimensions.height > b.position.y\n  )\n}\n","/**\n * Created by nikos on 27/07/2018.\n */\nexport class Interpreter {\n  public readPixels() {\n    const gameCanvas: HTMLCanvasElement = document.querySelector(\n      '#game-canvas'\n    ) as HTMLCanvasElement\n    const miniColourCanvas: HTMLCanvasElement = document.querySelector(\n      '#mini-colour-canvas'\n    ) as HTMLCanvasElement\n    const monoCanvas: HTMLCanvasElement = document.querySelector(\n      '#mono-canvas'\n    ) as HTMLCanvasElement\n\n    const miniColourCanvasCtx = miniColourCanvas.getContext('2d')\n    const monoCanvasCtx = monoCanvas.getContext('2d')\n\n    miniColourCanvasCtx.drawImage(gameCanvas, 0, 0, 100, 100)\n\n    // convert to black and white\n\n    const imageData = miniColourCanvasCtx.getImageData(\n      0,\n      0,\n      miniColourCanvas.width,\n      miniColourCanvas.height\n    )\n    const data = imageData.data\n\n    for (let i = 0; i < data.length; i += 4) {\n      const brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]\n      // red\n      data[i] = brightness\n      // green\n      data[i + 1] = brightness\n      // blue\n      data[i + 2] = brightness\n    }\n\n    // overwrite original image\n    monoCanvasCtx.putImageData(imageData, 0, 0)\n  }\n}\n","import * as GameSettings from './constants/GameSettings'\nimport { BATTLE_MODE, GAME_OVER, INITIALISING, YOU_WIN } from './constants/GameStates'\nimport { KEY_CODES } from './constants/KeyCodes'\nimport { AbstractInvader } from './gameObjects/AbstractInvader'\nimport { Bullet } from './gameObjects/Bullets'\nimport { IGameObject } from './gameObjects/IGameObject'\nimport { Player } from './gameObjects/Player'\nimport { DestructibleScenery, PlayerBase } from './gameObjects/PlayerBase'\nimport { WaveManager } from './story/WaveManager'\nimport { rectCollides } from './util/CollisionDetection'\nimport { degreesToRadians } from './util/Conversions'\nimport { Vector2, Vector2Normalised } from './util/Vectors'\n\nimport { Interpreter } from './agent/Interpreter'\n\nexport class SpaceInvaders {\n  public static ASPECT_RATIO: number = 1 // keep it square for now\n  public static CANVAS_WIDTH: number = 600\n  public static CANVAS_HEIGHT: number = SpaceInvaders.CANVAS_WIDTH / SpaceInvaders.ASPECT_RATIO\n\n  static gameState = INITIALISING\n  static score: number = 0\n\n  public interpreter: Interpreter\n\n  private waveManager = new WaveManager()\n  private player: Player\n  private playerOffsetHeight: number = 20\n  private playerBullets: Bullet[] = []\n  private bases: PlayerBase[] = []\n\n  private invaders: AbstractInvader[]\n  private invaderBullets: Bullet[] = []\n\n  private canvas: HTMLCanvasElement\n\n  private context2D: CanvasRenderingContext2D\n  private background = new Image()\n\n  private spaceColor: string = 'black'\n\n  private keyStatus = {}\n\n  private lastFrame: number = new Date().getTime()\n\n  /**\n   * Basically we figure out the best width for our canvas at start up.\n   */\n  constructor(hostElement: HTMLCanvasElement) {\n    this.canvas = hostElement\n    new Date().getTime()\n    this.context2D = this.canvas.getContext('2d')\n    this.canvas.width = SpaceInvaders.CANVAS_WIDTH\n    this.canvas.height = this.canvas.width / SpaceInvaders.ASPECT_RATIO\n    this.background.src = require('./images/backgrounds/sunrise.jpg')\n\n    // all keys are down to start\n    for (const code in KEY_CODES) {\n      if (KEY_CODES.hasOwnProperty(code)) {\n        this.keyStatus[KEY_CODES[code]] = false\n      }\n    }\n\n    this.initGame()\n    this.setupAgent()\n  }\n\n  public setupAgent() {\n    this.interpreter = new Interpreter()\n  }\n\n  public update() {\n    const start = new Date().getTime()\n    const elapsedTime: number = start - this.lastFrame\n\n    // get the current time as seconds then multiple by the game speed to get a sensible number for multiplying velocities per frame\n    const elapsedReduced: number = (elapsedTime / 1000.0) * GameSettings.GAME_SPEED\n\n    this.drawBackground()\n\n    switch (SpaceInvaders.gameState) {\n      case INITIALISING:\n        this.drawInit()\n        return\n      case YOU_WIN:\n        this.drawYouWin()\n        return\n      case GAME_OVER:\n        this.drawGameOver()\n        return\n    }\n\n    // battle mode\n    this.updatePlayer(elapsedReduced)\n    this.updateEnemies(elapsedReduced)\n    this.updateBullets(elapsedReduced)\n    this.updateBases()\n    this.handleCollisions()\n\n    if (this.invaders.length === 0) {\n      this.invaders = this.waveManager.getNextWave()\n      if (!this.invaders) {\n        SpaceInvaders.gameState = YOU_WIN\n        return\n      }\n    }\n\n    this.drawBattleScene()\n    this.lastFrame = start\n  }\n\n  /**\n   * We want equally spaced bases  like this:\n   *\n   *\n   * |                                        |\n   * |                                        |\n   * |                                        |\n   * |                                        |\n   * |     ###           ###          ###     |\n   * |                                        |\n   * |                                        |\n   * |                                        |\n   *\n   */\n  public createBases(\n    noOfBases: number,\n    containedWithinDimensions: Vector2,\n    edgeSpace: number = 40\n  ) {\n    const bases: PlayerBase[] = [] // clear old one if there\n    for (let i = 0; i < noOfBases; i++) {\n      this.bases.push(new PlayerBase(containedWithinDimensions))\n    }\n    const freeSpace =\n      SpaceInvaders.CANVAS_WIDTH - edgeSpace * 2 - noOfBases * this.bases[0].actualDimensions.x\n    const spaceBetween = freeSpace / (noOfBases - 1)\n    // assume that all bases are same size\n    for (let i = 0; i < noOfBases; i++) {\n      const nextPos: Vector2 = new Vector2(\n        i * (this.bases[0].actualDimensions.x + spaceBetween) + edgeSpace,\n        500\n      )\n      this.bases[i].transform(nextPos)\n    }\n  }\n\n  public drawInit() {\n    this.context2D.fillStyle = '#0FF'\n    this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana'\n    this.context2D.fillText('Loading..', 5, 25)\n    SpaceInvaders.gameState = BATTLE_MODE\n  }\n\n  public drawGameOver() {\n    this.context2D.fillStyle = '#F00'\n    this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana'\n    this.context2D.fillText('SpaceInvaders over!', 5, 25)\n  }\n\n  public drawYouWin() {\n    this.context2D.fillStyle = '#FF0'\n    this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana'\n    this.context2D.fillText('YOU win!', 5, 25)\n  }\n\n  public onKeyDown(evt) {\n    this.keyStatus[evt.keyCode] = true\n  }\n\n  public onKeyUp(evt) {\n    this.keyStatus[evt.keyCode] = false\n  }\n\n  public initGame() {\n    // bottom middle\n    this.player = new Player(\n      new Vector2(\n        SpaceInvaders.CANVAS_WIDTH / 2,\n        this.canvas.height - this.playerOffsetHeight - Player.DEFAULT_HEIGHT\n      )\n    )\n    this.invaders = this.waveManager.getNextWave()\n    this.createBases(3, new Vector2(100, 30))\n  }\n\n  /**\n   * Remove scenery that has been hit\n   */\n  public updateBases() {\n    this.bases.forEach((base: PlayerBase) => {\n      base.allDestructibleScenery = base.allDestructibleScenery.filter(particle => {\n        return particle.active\n      })\n    })\n  }\n\n  public drawBackground() {\n    this.context2D.fillStyle = this.spaceColor\n    this.context2D.fillRect(0, 0, SpaceInvaders.CANVAS_WIDTH, SpaceInvaders.CANVAS_HEIGHT)\n    this.context2D.drawImage(this.background, -200, 0)\n  }\n\n  public drawScore() {\n    this.context2D.fillStyle = '#0FF'\n    this.context2D.font = GameSettings.MEDIUM_FONT_SIZE + 'px Verdana'\n    this.context2D.fillText(`Score: ${SpaceInvaders.score}`, 2, 14)\n    this.context2D.fillText(`Health: ${this.player.health}`, 2, SpaceInvaders.CANVAS_HEIGHT - 6)\n  }\n\n  public drawBattleScene() {\n    this.drawScore()\n\n    this.invaders.forEach((thing: AbstractInvader) => {\n      thing.draw(this.context2D)\n    })\n    this.playerBullets.forEach((thing: Bullet) => {\n      thing.draw(this.context2D)\n    })\n    this.invaderBullets.forEach((thing: Bullet) => {\n      thing.draw(this.context2D)\n    })\n    this.bases.forEach((thing: PlayerBase) => {\n      thing.draw(this.context2D)\n    })\n    this.player.draw(this.context2D)\n\n    this.interpreter.readPixels()\n  }\n\n  public updatePlayer(elapsedTime: number) {\n    if (this.keyStatus[KEY_CODES.LEFT]) {\n      if (this.keyStatus[KEY_CODES.UP]) {\n        this.player.updateDirection(new Vector2Normalised(degreesToRadians(305)))\n      } else if (this.keyStatus[KEY_CODES.DOWN]) {\n        this.player.updateDirection(new Vector2Normalised(degreesToRadians(225)))\n      } else {\n        this.player.updateDirection(new Vector2Normalised(degreesToRadians(270)))\n      }\n    } else if (this.keyStatus[KEY_CODES.RIGHT]) {\n      if (this.keyStatus[KEY_CODES.UP]) {\n        this.player.updateDirection(new Vector2Normalised(degreesToRadians(45)))\n      } else if (this.keyStatus[KEY_CODES.DOWN]) {\n        this.player.updateDirection(new Vector2Normalised(degreesToRadians(135)))\n      } else {\n        this.player.updateDirection(new Vector2Normalised(degreesToRadians(90)))\n      }\n    } else if (this.keyStatus[KEY_CODES.UP]) {\n      this.player.updateDirection(new Vector2Normalised(degreesToRadians(0)))\n    } else if (this.keyStatus[KEY_CODES.DOWN]) {\n      this.player.updateDirection(new Vector2Normalised(degreesToRadians(180)))\n    } else {\n      this.player.remainStationary()\n    }\n\n    if (this.keyStatus[KEY_CODES.SPACE]) {\n      const bullet = this.player.shootAhead()\n      if (bullet) {\n        this.playerBullets.push(bullet)\n      }\n    }\n\n    this.player.update(elapsedTime)\n    this.clamp(this.player)\n  }\n\n  public ReverseEnemyDirectionIfOutOfBoundsAndDropDown(): void {\n    let outOfBoundsBy = 0\n    this.invaders.forEach(item => {\n      if (item.position.x < 0) {\n        outOfBoundsBy = item.position.x\n        return\n      } else if (item.position.x > SpaceInvaders.CANVAS_WIDTH - item.dimensions.width) {\n        outOfBoundsBy = item.position.x - (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width)\n        return\n      }\n    })\n\n    if (outOfBoundsBy === 0) {\n      return\n    }\n\n    this.invaders.forEach((enemy: AbstractInvader) => {\n      // moving to the right\n      enemy.position.x -= outOfBoundsBy\n      enemy.reverse()\n      enemy.position.y += 10\n    })\n  }\n\n  public updateEnemies(elapsedUnit: number) {\n    this.invaders = this.invaders.filter(enemy => {\n      return enemy.active\n    })\n\n    this.invaders.forEach((enemy: AbstractInvader) => {\n      enemy.update(elapsedUnit) // this might move things out of bounds so check next\n      //  self.clamp(enemy)\n    })\n\n    this.ReverseEnemyDirectionIfOutOfBoundsAndDropDown()\n    this.invaders.forEach((invader: AbstractInvader) => {\n      if (Math.random() < invader.probabilityOfShooting) {\n        this.invaderBullets = this.invaderBullets.concat(invader.shootAhead())\n      }\n    })\n  }\n\n  public updateBullets(elapsedUnit: number) {\n    this.playerBullets = this.playerBullets.filter(bullet => {\n      return bullet.active\n    })\n    this.playerBullets.forEach((bullet: Bullet) => {\n      bullet.update(elapsedUnit)\n    })\n\n    this.invaderBullets = this.invaderBullets.filter(bullet => {\n      return bullet.active\n    })\n    this.invaderBullets.forEach((bullet: Bullet) => {\n      bullet.update(elapsedUnit)\n    })\n  }\n\n  public handleCollisions() {\n    this.playerBullets.forEach((bullet: Bullet) => {\n      this.invaders.forEach((invader: AbstractInvader) => {\n        if (rectCollides(bullet, invader)) {\n          invader.takeHit(bullet)\n          bullet.active = false\n        }\n      })\n      this.bases.forEach((base: PlayerBase) => {\n        base.allDestructibleScenery.forEach((particle: DestructibleScenery) => {\n          if (rectCollides(bullet, particle)) {\n            particle.explode()\n            bullet.active = false\n          }\n        })\n      })\n    })\n\n    this.invaderBullets.forEach((bullet: Bullet) => {\n      if (rectCollides(bullet, this.player)) {\n        this.player.takeDamage(bullet)\n        const positionCopy = JSON.parse(JSON.stringify(this.player.position))\n        bullet.active = false\n      }\n      this.bases.forEach((base: PlayerBase) => {\n        base.allDestructibleScenery.forEach((particle: DestructibleScenery) => {\n          if (rectCollides(bullet, particle)) {\n            particle.explode()\n            bullet.active = false\n          }\n        })\n      })\n    })\n  }\n\n  public gameOver() {\n    alert('you lose!')\n  }\n\n  public clamp(item: IGameObject) {\n    if (item.position.x < 0) {\n      item.position.x = 0\n      return\n    } else if (item.position.x > SpaceInvaders.CANVAS_WIDTH - item.dimensions.width) {\n      item.position.x = SpaceInvaders.CANVAS_WIDTH - item.dimensions.width\n      return\n    } else if (item.position.y < 0) {\n      item.position.y = 0\n      return\n    } else if (item.position.y > SpaceInvaders.CANVAS_HEIGHT - item.dimensions.height) {\n      item.position.y = SpaceInvaders.CANVAS_HEIGHT - item.dimensions.height\n      return\n    }\n  }\n}\n","import {SpaceInvaders} from './src/SpaceInvaders.ts'\n\n  // this is where everything starts\nlet game = new SpaceInvaders(document.querySelector('#game-canvas'))\n\n// game.handleCollisions.bind(game)\nwindow.addEventListener('keydown', (game.onKeyDown.bind(game)))\nwindow.addEventListener('keyup', (game.onKeyUp.bind(game)))\n\nfunction gameLoop () {\n  requestAnimationFrame(gameLoop)\n  // Drawing code goes here\n  game.update()\n}\n\ngameLoop()\n"]}