{"version":3,"sources":["src/util/Vectors.ts","src/constants/GameSettings.ts","src/gameObjects/Bullets.ts","src/constants/GameStates.ts","src/gameObjects/Player.ts","src/constants/Keycodes.ts","src/util/Canvas2D_tools.ts","src/gameObjects/AbstractInvader.ts","src/util/Conversions.ts","src/gameObjects/Invaders.ts","src/util/MathChecks.ts","src/util/Formations.ts","src/story/WaveManager.ts","src/util/CollisionDetection.ts","src/gameObjects/PlayerBase.ts","src/SpaceInvaders.ts","index.js"],"names":["Object","defineProperty","exports","value","Dimensions2","width","height","Vector2","x","y","otherVector","Math","sqrt","pow","atan2","degreesToRadians","radians","newAngleRads","mag","magnitude","sin","cos","Vector2Normalised","degrees","PI","radiansToDegress","getFanSpreadVectors","numberOfBullets","spreadAngleRadians","arr","angleGap","startingAngle","i","nextAngle","push","GAME_SPEED","VERY_SLOW_MOVEMENT_SPEED","SLOW_MOVEMENT_SPEED","MEDIUM_MOVEMENT_SPEED","FAST_MOVEMENT_SPEED","VERY_FAST_MOVEMENT_SPEED","MEDIUM_FONT_SIZE","LARGE_FONT_SIZE","SpaceInvaders_1","require","Vectors_1","GameSettings","Bullet","position","directionVector","active","dimensions","SpaceInvaders","CANVAS_WIDTH","CANVAS_HEIGHT","SMALL_SIZE","LARGE_SIZE","BasicBullet","color","damageInflicted","canvas","fillStyle","fillRect","elapsedUnit","inBounds","INITIALISING","GAME_OVER","BATTLE_MODE","YOU_WIN","Bullets_1","GameSettings_1","GameStates_1","Player","DEFAULT_WIDTH","DEFAULT_HEIGHT","health","lastShotTime","fireRatePerSec","context2D","drawImage","img","gameState","document","createElement","timeDifference","Date","getTime","midpoint","bullet","explode","Image","src","KEY_CODES","GameMath","rotateAndPaintImage","context","image","angleInDegrees","positionX","positionY","axisX","axisY","angleInRadians","translate","rotate","Canvas2D_tools_1","AbstractInvader","probabilityOfShooting","rotationInDegrees","facingAngleRad","ctx","score","pointsValue","AbstractInvader_1","Conversions_1","LightInvader","MediumInvader","HeavyInvader","random","vectors","bulletsToFire","forEach","b","item","angle","isSquare","n","MathChecks_1","triangle","gameObjects","horizontalGap","verticalGap","length","Error","numberOfRows","nextRowOffset","thisRowStartingIndex","numberOnThisRow","maxHeight","j","go","addTwo","rectangle","itemsPerRow","Invaders_1","Formations_1","WaveManager","waves","currentWave","generateWaves","nextWave","units","updateDirection","rectCollides","a","DestructibleScenery","DEFAULT_SIZE","PlayerBase","requestedDimensions","allDestructibleScenery","numberPerRow","floor","numberPerColumn","actualDimensions","nextPosition","draw","add","Player_1","Keycodes_1","WaveManager_1","CollisionDetection_1","PlayerBase_1","hostElement","code","waveManager","playerOffsetHeight","playerBullets","bases","invaderBullets","background","spaceColor","keyStatus","lastFrame","getContext","ASPECT_RATIO","initGame","start","elapsedReduced","drawBackground","drawInit","drawYouWin","drawGameOver","updatePlayer","updateEnemies","updateBullets","updateBases","handleCollisions","invaders","getNextWave","drawBattleScene","noOfBases","containedWithinDimensions","edgeSpace","freeSpace","spaceBetween","nextPos","transform","font","fillText","evt","keyCode","player","createBases","base","filter","particle","drawScore","self","thing","elapsedTime","LEFT","UP","DOWN","RIGHT","remainStationary","SPACE","shootAhead","update","clamp","outOfBoundsBy","enemy","reverse","ReverseEnemyDirectionIfOutOfBoundsAndDropDown","invader","concat","takeHit","takeDamage","JSON","parse","stringify","gameLoop","game","querySelector","window","addEventListener","onKeyDown","bind","onKeyUp"],"mappings":"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","file":"youtube-space-invaders.e8a4ffdb.map","sourceRoot":"..","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Dimensions2 {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n}\nexports.Dimensions2 = Dimensions2;\nclass Vector2 {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    add(otherVector) {\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    }\n    addTwo(x, y) {\n        return new Vector2(this.x + x, this.y + y);\n    }\n    reverse() {\n        return new Vector2(-this.x, -this.y);\n    }\n    magnitude() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n    angle() {\n        return Math.atan2(this.y, this.x) - degreesToRadians(-90);\n    }\n    /**\n     * returns a new vector based on the current one rotated by an angle\n     * @param initialVector\n     * @param rotatingDegrees\n     * @returns {Vector2}\n     */\n    rotateBy(radians) {\n        let newAngleRads = Math.atan2(this.x, this.y) + radians;\n        let mag = this.magnitude();\n        return new Vector2(mag * Math.sin(newAngleRads), mag * Math.cos(newAngleRads));\n    }\n}\nexports.Vector2 = Vector2;\nclass Vector2Normalised extends Vector2 {\n    constructor(radians) {\n        super(Math.sin(radians), -Math.cos(radians));\n    }\n}\nexports.Vector2Normalised = Vector2Normalised;\nfunction degreesToRadians(degrees) {\n    return (degrees / 360) * 2 * Math.PI;\n}\nexports.degreesToRadians = degreesToRadians;\nfunction radiansToDegress(radians) {\n    return (radians * 360) / (2 * Math.PI);\n}\nexports.radiansToDegress = radiansToDegress;\n/**\n * Returns array of vectors equally spaced measured from both sidesfor the x origin in normal maths xy chart\n * the shooter will then modify based on its rotation of the firing gun\n */\nfunction getFanSpreadVectors(numberOfBullets, spreadAngleRadians) {\n    let arr = [];\n    let angleGap = spreadAngleRadians / numberOfBullets;\n    let startingAngle = spreadAngleRadians / 2;\n    for (let i = 0; i < numberOfBullets; i++) {\n        let nextAngle = startingAngle - i * angleGap;\n        arr.push(new Vector2Normalised(nextAngle));\n    }\n    return arr;\n}\nexports.getFanSpreadVectors = getFanSpreadVectors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GAME_SPEED = 50; // the higher the number the faster the game will run, all movemments are effected by this number\nexports.VERY_SLOW_MOVEMENT_SPEED = 1;\nexports.SLOW_MOVEMENT_SPEED = 2;\nexports.MEDIUM_MOVEMENT_SPEED = 4;\nexports.FAST_MOVEMENT_SPEED = 6;\nexports.VERY_FAST_MOVEMENT_SPEED = 12;\nexports.MEDIUM_FONT_SIZE = 14;\nexports.LARGE_FONT_SIZE = 20;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SpaceInvaders_1 = require(\"../SpaceInvaders\");\nconst Vectors_1 = require(\"../util/Vectors\");\nconst GameSettings = require(\"../constants/GameSettings\");\nclass Bullet {\n    constructor(position, directionVector) {\n        this.position = position;\n        this.active = true;\n        this.directionVector = directionVector;\n    }\n    inBounds() {\n        return this.position.x >= 0 && (this.position.x - this.dimensions.width <= SpaceInvaders_1.SpaceInvaders.CANVAS_WIDTH) &&\n            this.position.y >= 0 && (this.position.y - this.dimensions.height <= SpaceInvaders_1.SpaceInvaders.CANVAS_HEIGHT);\n    }\n}\nBullet.SMALL_SIZE = 3;\nBullet.LARGE_SIZE = 9;\nexports.Bullet = Bullet;\nclass BasicBullet extends Bullet {\n    constructor(position, directionVector) {\n        super(position, directionVector);\n        this.position = position;\n        this.dimensions = new Vectors_1.Dimensions2(Bullet.SMALL_SIZE, Bullet.SMALL_SIZE);\n        this.color = 'white';\n        this.damageInflicted = 1;\n    }\n    draw(canvas) {\n        canvas.fillStyle = this.color;\n        canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n    }\n    update(elapsedUnit) {\n        this.position.x += this.directionVector.x * elapsedUnit * GameSettings.MEDIUM_MOVEMENT_SPEED;\n        this.position.y += this.directionVector.y * elapsedUnit * GameSettings.MEDIUM_MOVEMENT_SPEED;\n        this.active = this.active && this.inBounds();\n    }\n}\nexports.BasicBullet = BasicBullet;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INITIALISING = 'INITIALISING';\nexports.GAME_OVER = 'GAME_OVER';\nexports.BATTLE_MODE = 'BATTLE_MODE';\nexports.YOU_WIN = 'YOU_WIN';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Bullets_1 = require(\"./Bullets\");\nconst GameSettings_1 = require(\"../constants/GameSettings\");\nconst GameStates_1 = require(\"../constants/GameStates\");\nconst SpaceInvaders_1 = require(\"../SpaceInvaders\");\nclass Player {\n    constructor(position) {\n        this.color = '#0FF';\n        this.dimensions = new Vectors_1.Dimensions2(Player.DEFAULT_WIDTH, Player.DEFAULT_HEIGHT);\n        this.health = 3;\n        this.lastShotTime = 0;\n        this.fireRatePerSec = 4;\n        this.directionVector = new Vectors_1.Vector2(0, 0);\n        this.position = position;\n    }\n    draw(context2D) {\n        context2D.drawImage(img, this.position.x, this.position.y);\n    }\n    update(elapsedUnit) {\n        this.position.x += this.directionVector.x * elapsedUnit * GameSettings_1.MEDIUM_MOVEMENT_SPEED;\n        this.position.y += this.directionVector.y * elapsedUnit * GameSettings_1.MEDIUM_MOVEMENT_SPEED;\n    }\n    midpoint() {\n        return new Vectors_1.Vector2(this.position.x + this.dimensions.width / 2, this.position.y + this.dimensions.height / 2);\n    }\n    explode() {\n        SpaceInvaders_1.SpaceInvaders.gameState = GameStates_1.GAME_OVER;\n        let myAudio = document.createElement('audio');\n        // todo\n        // myAudio.src = require('file?name=playerExplosion.mp3!../audio/playerExplosion.mp3')\n        // myAudio.play()\n    }\n    shootAhead() {\n        // todo Sound.play('shoot')\n        let timeDifference = new Date().getTime() - this.lastShotTime;\n        if (timeDifference > (1000 / this.fireRatePerSec)) {\n            this.lastShotTime = new Date().getTime();\n            return new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2Normalised(0));\n        }\n        else {\n            return null;\n        }\n    }\n    updateDirection(directionVector) {\n        this.directionVector = directionVector;\n    }\n    remainStationary() {\n        this.directionVector.x = 0;\n        this.directionVector.y = 0;\n    }\n    takeDamage(bullet) {\n        this.health -= bullet.damageInflicted;\n        if (this.health <= 0) {\n            this.explode();\n        }\n    }\n}\nPlayer.DEFAULT_HEIGHT = 30;\nPlayer.DEFAULT_WIDTH = 60;\nexports.Player = Player;\nlet img = new Image();\nimg.src = require('../images/player.svg');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_CODES = {\n    RETURN: 13,\n    ESC: 27,\n    SPACE: 32,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    ZERO: 48,\n    ONE: 49,\n    TWO: 50\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GameMath = require(\"./Vectors\");\nfunction rotateAndPaintImage(context, image, angleInDegrees, positionX, positionY, axisX, axisY) {\n    let angleInRadians = GameMath.degreesToRadians(angleInDegrees);\n    context.translate(positionX, positionY);\n    context.rotate(angleInRadians);\n    context.drawImage(image, -axisX, -axisY);\n    context.rotate(-angleInRadians);\n    context.translate(-positionX, -positionY);\n}\nexports.rotateAndPaintImage = rotateAndPaintImage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Bullets_1 = require(\"./Bullets\");\nconst GameSettings = require(\"../constants/GameSettings\");\nconst SpaceInvaders_1 = require(\"../SpaceInvaders\");\nconst Canvas2D_tools_1 = require(\"../util/Canvas2D_tools\");\nclass AbstractInvader {\n    constructor(position) {\n        this.position = position;\n        this.health = 1;\n        this.dimensions = new Vectors_1.Dimensions2(AbstractInvader.DEFAULT_WIDTH, AbstractInvader.DEFAULT_HEIGHT);\n        this.active = true;\n        this.probabilityOfShooting = 0.0005; // on each game frame\n        this.rotationInDegrees = 180; // todo this will change\n        this.image = new Image();\n        this.directionVector = new Vectors_1.Vector2(0, 0);\n        this.facingAngleRad = Math.PI; // pointing down for now\n    }\n    draw(ctx) {\n        Canvas2D_tools_1.rotateAndPaintImage(ctx, this.image, 180, this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n    }\n    midpoint() {\n        return new Vectors_1.Vector2(this.position.x + this.dimensions.width / 2, this.position.y + this.dimensions.height / 2);\n    }\n    explode() {\n        this.active = false;\n        SpaceInvaders_1.SpaceInvaders.score += this.pointsValue;\n        // todo boom graphic\n    }\n    reverse() {\n        this.directionVector.x = -this.directionVector.x;\n        this.directionVector.y = -this.directionVector.y;\n        // todo boom graphic\n    }\n    updateDirection(directionVector) {\n        this.directionVector = directionVector;\n    }\n    update(elapsedUnit) {\n        this.position.x += this.directionVector.x * elapsedUnit * GameSettings.VERY_SLOW_MOVEMENT_SPEED;\n    }\n    shootAhead() {\n        // todo Sound.play('shoot')\n        return [new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2(0, 1))];\n    }\n    takeHit(bullet) {\n        this.health -= bullet.damageInflicted;\n        if (this.health <= 0) {\n            this.explode();\n        }\n    }\n}\nAbstractInvader.DEFAULT_HEIGHT = 20;\nAbstractInvader.DEFAULT_WIDTH = 30;\nexports.AbstractInvader = AbstractInvader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction degreesToRadians(degrees) {\n    return (degrees / 360) * 2 * Math.PI;\n}\nexports.degreesToRadians = degreesToRadians;\nfunction radiansToDegress(radians) {\n    return (radians * 360) / (2 * Math.PI);\n}\nexports.radiansToDegress = radiansToDegress;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Bullets_1 = require(\"./Bullets\");\nconst AbstractInvader_1 = require(\"./AbstractInvader\");\nconst Conversions_1 = require(\"../util/Conversions\");\nclass LightInvader extends AbstractInvader_1.AbstractInvader {\n    constructor(position = new Vectors_1.Vector2(0, 0)) {\n        super(position);\n        this.probabilityOfShooting = 0.001;\n        this.health = 1;\n        this.pointsValue = 10;\n        this.image.src = require('../images/lightInvader.svg');\n    }\n}\nexports.LightInvader = LightInvader;\nclass MediumInvader extends AbstractInvader_1.AbstractInvader {\n    constructor(position = new Vectors_1.Vector2(0, 0)) {\n        super(position);\n        this.probabilityOfShooting = 0.002;\n        this.health = 3;\n        this.pointsValue = 30;\n        this.image.src = require('../images/MediumInvader.svg');\n    }\n}\nexports.MediumInvader = MediumInvader;\nclass HeavyInvader extends AbstractInvader_1.AbstractInvader {\n    constructor(position = new Vectors_1.Vector2(0, 0)) {\n        super(position);\n        this.probabilityOfShooting = 0.004;\n        this.pointsValue = 60;\n        this.health = 5;\n        this.image.src = require('../images/HeavyInvader.svg');\n    }\n    shootAhead() {\n        // todo Sound.play('shoot')\n        let self = this;\n        let x = Math.random();\n        if (x >= 0 && x <= 0.75) {\n            return [new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2Normalised(0))];\n        }\n        else {\n            let vectors = Vectors_1.getFanSpreadVectors(10, Conversions_1.degreesToRadians(45));\n            let bulletsToFire = [];\n            vectors.forEach(item => {\n                let b = new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2Normalised(this.facingAngleRad + item.angle()));\n                bulletsToFire.push(b);\n            });\n            return bulletsToFire;\n        }\n    }\n}\nexports.HeavyInvader = HeavyInvader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isSquare(n) {\n    return n > 0 && Math.sqrt(n) % 1 === 0;\n}\nexports.isSquare = isSquare;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MathChecks_1 = require(\"./MathChecks\");\nconst Vectors_1 = require(\"./Vectors\");\n/**\n * modifys an array of objects so their position is in a triangle\n *\n * let row number = n\n * each row contains (n*2)-1\n *\n * total rows = n^2\n * must be a perfect square of units\n * we render each unit from the bottom left\n *\n * looks like:\n *     1\n *    111\n *   11111\n *  1111111\n *\n * @param gameObjects\n */\nfunction triangle(gameObjects, horizontalGap, verticalGap) {\n    if (!MathChecks_1.isSquare(gameObjects.length)) {\n        throw new Error('needs perfect square number of units');\n    }\n    let numberOfRows = Math.sqrt(gameObjects.length);\n    let nextRowOffset = new Vectors_1.Vector2(0, 0);\n    let thisRowStartingIndex = 0;\n    for (let i = numberOfRows; i >= 1; i--) {\n        let numberOnThisRow = (i * 2) - 1;\n        let maxHeight = 0;\n        for (let j = 0; j < numberOnThisRow; j++) {\n            let go = gameObjects[thisRowStartingIndex + j];\n            if (go.dimensions.height > maxHeight) {\n                maxHeight = go.dimensions.height;\n            }\n            go.position = new Vectors_1.Vector2(j * (go.dimensions.width + horizontalGap) + nextRowOffset.x, nextRowOffset.y);\n        }\n        nextRowOffset = nextRowOffset.addTwo(gameObjects[thisRowStartingIndex].dimensions.width + horizontalGap, maxHeight + verticalGap);\n        thisRowStartingIndex = thisRowStartingIndex + numberOnThisRow;\n    }\n}\nexports.triangle = triangle;\nfunction rectangle(gameObjects, itemsPerRow, horizontalGap, verticalGap) {\n    let numberOfRows = gameObjects.length / itemsPerRow;\n    if (numberOfRows % 1 !== 0) {\n        throw new Error('number / itemsPerRow must fit');\n    }\n    let nextRowOffset = new Vectors_1.Vector2(0, 0);\n    let thisRowStartingIndex = 0;\n    for (let i = 0; i < numberOfRows; i++) {\n        let maxHeight = 0;\n        for (let j = 0; j < itemsPerRow; j++) {\n            let go = gameObjects[thisRowStartingIndex + j];\n            if (go.dimensions.height > maxHeight) {\n                maxHeight = go.dimensions.height;\n            }\n            go.position = new Vectors_1.Vector2(j * (go.dimensions.width + horizontalGap) + nextRowOffset.x, nextRowOffset.y);\n        }\n        nextRowOffset = nextRowOffset.addTwo(0, maxHeight + verticalGap);\n        thisRowStartingIndex = thisRowStartingIndex + itemsPerRow;\n    }\n}\nexports.rectangle = rectangle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Invaders_1 = require(\"../gameObjects/Invaders\");\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Formations_1 = require(\"../util/Formations\");\nclass WaveManager {\n    constructor() {\n        this.waves = [];\n        this.currentWave = 0;\n        this.generateWaves();\n    }\n    getNextWave() {\n        let nextWave = this.waves[this.currentWave];\n        if (nextWave) {\n            this.currentWave++;\n            return nextWave();\n        }\n        return null;\n    }\n    generateWaves() {\n        let horizontalGap = 15;\n        let verticalGap = 20;\n        let initialXOffset = 20;\n        let initialYOffset = 20;\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.rectangle(units, 4, horizontalGap, verticalGap);\n            return units;\n        });\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.rectangle(units, 8, horizontalGap, verticalGap);\n            return units;\n        });\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.MediumInvader(), new Invaders_1.MediumInvader(), new Invaders_1.MediumInvader(),\n                new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.triangle(units, horizontalGap, verticalGap);\n            return units;\n        });\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.triangle(units, horizontalGap, verticalGap);\n            return units;\n        });\n    }\n}\nexports.WaveManager = WaveManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction rectCollides(a, b) {\n    return a.position.x < b.position.x + b.dimensions.width &&\n        a.position.x + a.dimensions.width > b.position.x &&\n        a.position.y < b.position.y + b.dimensions.height &&\n        a.position.y + a.dimensions.height > b.position.y;\n}\nexports.rectCollides = rectCollides;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nclass DestructibleScenery {\n    constructor(position) {\n        this.dimensions = new Vectors_1.Dimensions2(DestructibleScenery.DEFAULT_SIZE, DestructibleScenery.DEFAULT_SIZE);\n        this.color = '#0F9';\n        this.active = true;\n        this.position = position;\n    }\n    draw(canvas) {\n        canvas.fillStyle = this.color;\n        if (this.active) {\n            canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n        }\n    }\n    // tslint:disable-next-line\n    update(elapsedUnit) {\n    }\n    explode() {\n        this.active = false;\n        // todo boom graphic\n    }\n}\nDestructibleScenery.DEFAULT_SIZE = 5;\nexports.DestructibleScenery = DestructibleScenery;\n/**\n * The classic Green protective bases the player can hide behind\n */\nclass PlayerBase {\n    constructor(requestedDimensions) {\n        this.requestedDimensions = requestedDimensions;\n        this.allDestructibleScenery = [];\n        let numberPerRow = Math.floor(requestedDimensions.x / DestructibleScenery.DEFAULT_SIZE);\n        let numberPerColumn = Math.floor(requestedDimensions.y / DestructibleScenery.DEFAULT_SIZE);\n        this.actualDimensions = new Vectors_1.Vector2(numberPerRow * DestructibleScenery.DEFAULT_SIZE, numberPerColumn * DestructibleScenery.DEFAULT_SIZE);\n        let nextPosition;\n        // just rectangular bases to start with\n        // todo mask values to give shapes like the original space invaders bases\n        for (let i = 0; i < numberPerRow; i++) {\n            nextPosition = new Vectors_1.Vector2(DestructibleScenery.DEFAULT_SIZE * i, 0);\n            for (let j = 0; j < numberPerColumn; j++) {\n                nextPosition = nextPosition.addTwo(0, DestructibleScenery.DEFAULT_SIZE);\n                this.allDestructibleScenery.push(new DestructibleScenery(nextPosition));\n            }\n        }\n    }\n    draw(canvas) {\n        let self = this;\n        self.allDestructibleScenery.forEach(function (item) {\n            item.draw(canvas);\n        });\n    }\n    transform(position) {\n        this.allDestructibleScenery.forEach(function (item) {\n            item.position = item.position.add(position);\n        });\n    }\n}\nexports.PlayerBase = PlayerBase;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Player_1 = require(\"./gameObjects/Player\");\nconst Vectors_1 = require(\"./util/Vectors\");\nconst Keycodes_1 = require(\"./constants/Keycodes\");\nconst GameSettings = require(\"./constants/GameSettings\");\nconst GameStates_1 = require(\"./constants/GameStates\");\nconst WaveManager_1 = require(\"./story/WaveManager\");\nconst CollisionDetection_1 = require(\"./util/CollisionDetection\");\nconst Conversions_1 = require(\"./util/Conversions\");\nconst PlayerBase_1 = require(\"./gameObjects/PlayerBase\");\nclass SpaceInvaders {\n    /**\n     * Basically we figure out the best width for our canvas at start up.\n     */\n    constructor(hostElement) {\n        this.waveManager = new WaveManager_1.WaveManager();\n        this.playerOffsetHeight = 20;\n        this.playerBullets = [];\n        this.bases = [];\n        this.invaderBullets = [];\n        this.background = new Image();\n        this.spaceColor = 'black';\n        this.keyStatus = {};\n        this.lastFrame = new Date().getTime();\n        this.canvas = hostElement;\n        new Date().getTime();\n        this.context2D = this.canvas.getContext('2d');\n        this.canvas.width = SpaceInvaders.CANVAS_WIDTH;\n        this.canvas.height = this.canvas.width / SpaceInvaders.ASPECT_RATIO;\n        this.background.src = require('./images/backgrounds/sunrise.jpg');\n        // all keys are down to start\n        for (let code in Keycodes_1.KEY_CODES) {\n            this.keyStatus[Keycodes_1.KEY_CODES[code]] = false;\n        }\n        this.initGame();\n    }\n    update() {\n        let start = new Date().getTime();\n        let elapsedTime = start - this.lastFrame;\n        // get the current time as seconds then multiple by the game speed to get a sensible number for multiplying velocities per frame\n        let elapsedReduced = (elapsedTime / 1000.0) * GameSettings.GAME_SPEED;\n        this.drawBackground();\n        switch (SpaceInvaders.gameState) {\n            case GameStates_1.INITIALISING:\n                this.drawInit();\n                return;\n            case GameStates_1.YOU_WIN:\n                this.drawYouWin();\n                return;\n            case GameStates_1.GAME_OVER:\n                this.drawGameOver();\n                return;\n        }\n        // battle mode\n        this.updatePlayer(elapsedReduced);\n        this.updateEnemies(elapsedReduced);\n        this.updateBullets(elapsedReduced);\n        this.updateBases();\n        this.handleCollisions();\n        if (this.invaders.length === 0) {\n            this.invaders = this.waveManager.getNextWave();\n            if (!this.invaders) {\n                SpaceInvaders.gameState = GameStates_1.YOU_WIN;\n                return;\n            }\n        }\n        this.drawBattleScene();\n        this.lastFrame = start;\n    }\n    /**\n     * We want equally spaced bases  like this:\n     *\n     *\n     * |                                        |\n     * |                                        |\n     * |                                        |\n     * |                                        |\n     * |     ###           ###          ###     |\n     * |                                        |\n     * |                                        |\n     * |                                        |\n     *\n     */\n    createBases(noOfBases, containedWithinDimensions, edgeSpace = 40) {\n        let bases = []; // clear old one if there\n        for (let i = 0; i < noOfBases; i++) {\n            this.bases.push(new PlayerBase_1.PlayerBase(containedWithinDimensions));\n        }\n        let freeSpace = SpaceInvaders.CANVAS_WIDTH - edgeSpace * 2 - noOfBases * this.bases[0].actualDimensions.x;\n        let spaceBetween = freeSpace / (noOfBases - 1);\n        // assume that all bases are same size\n        for (let i = 0; i < noOfBases; i++) {\n            let nextPos = new Vectors_1.Vector2(i * (this.bases[0].actualDimensions.x + spaceBetween) + edgeSpace, 500);\n            this.bases[i].transform(nextPos);\n        }\n    }\n    drawInit() {\n        this.context2D.fillStyle = '#0FF';\n        this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText('Loading..', 5, 25);\n        SpaceInvaders.gameState = GameStates_1.BATTLE_MODE;\n    }\n    drawGameOver() {\n        this.context2D.fillStyle = '#F00';\n        this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText('SpaceInvaders over!', 5, 25);\n    }\n    drawYouWin() {\n        this.context2D.fillStyle = '#FF0';\n        this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText('YOU win!', 5, 25);\n    }\n    onKeyDown(evt) {\n        this.keyStatus[evt.keyCode] = true;\n    }\n    onKeyUp(evt) {\n        this.keyStatus[evt.keyCode] = false;\n    }\n    initGame() {\n        // bottom middle\n        this.player = new Player_1.Player(new Vectors_1.Vector2(SpaceInvaders.CANVAS_WIDTH / 2, this.canvas.height - this.playerOffsetHeight - Player_1.Player.DEFAULT_HEIGHT));\n        this.invaders = this.waveManager.getNextWave();\n        this.createBases(3, new Vectors_1.Vector2(100, 30));\n    }\n    /**\n     * Remove scenery that has been hit\n     */\n    updateBases() {\n        let self = this;\n        self.bases.forEach(function (base) {\n            base.allDestructibleScenery = base.allDestructibleScenery.filter(function (particle) {\n                return particle.active;\n            });\n        });\n    }\n    drawBackground() {\n        this.context2D.fillStyle = this.spaceColor;\n        this.context2D.fillRect(0, 0, SpaceInvaders.CANVAS_WIDTH, SpaceInvaders.CANVAS_HEIGHT);\n        this.context2D.drawImage(this.background, -200, 0);\n    }\n    drawScore() {\n        this.context2D.fillStyle = '#0FF';\n        this.context2D.font = GameSettings.MEDIUM_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText(`Score: ${SpaceInvaders.score}`, 2, 14);\n        this.context2D.fillText(`Health: ${this.player.health}`, 2, SpaceInvaders.CANVAS_HEIGHT - 6);\n    }\n    drawBattleScene() {\n        this.drawScore();\n        let self = this;\n        this.invaders.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.playerBullets.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.invaderBullets.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.bases.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.player.draw(this.context2D);\n    }\n    updatePlayer(elapsedTime) {\n        if (this.keyStatus[Keycodes_1.KEY_CODES.LEFT]) {\n            if (this.keyStatus[Keycodes_1.KEY_CODES.UP]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(305)));\n            }\n            else if (this.keyStatus[Keycodes_1.KEY_CODES.DOWN]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(225)));\n            }\n            else {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(270)));\n            }\n        }\n        else if (this.keyStatus[Keycodes_1.KEY_CODES.RIGHT]) {\n            if (this.keyStatus[Keycodes_1.KEY_CODES.UP]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(45)));\n            }\n            else if (this.keyStatus[Keycodes_1.KEY_CODES.DOWN]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(135)));\n            }\n            else {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(90)));\n            }\n        }\n        else if (this.keyStatus[Keycodes_1.KEY_CODES.UP]) {\n            this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(0)));\n        }\n        else if (this.keyStatus[Keycodes_1.KEY_CODES.DOWN]) {\n            this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(180)));\n        }\n        else {\n            this.player.remainStationary();\n        }\n        if (this.keyStatus[Keycodes_1.KEY_CODES.SPACE]) {\n            let bullet = this.player.shootAhead();\n            if (bullet) {\n                this.playerBullets.push(bullet);\n            }\n        }\n        this.player.update(elapsedTime);\n        this.clamp(this.player);\n    }\n    ReverseEnemyDirectionIfOutOfBoundsAndDropDown() {\n        let outOfBoundsBy = 0;\n        this.invaders.forEach(item => {\n            if (item.position.x < 0) {\n                outOfBoundsBy = item.position.x;\n                return;\n            }\n            else if (item.position.x > (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width)) {\n                outOfBoundsBy = item.position.x - (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width);\n                return;\n            }\n        });\n        if (outOfBoundsBy === 0) {\n            return;\n        }\n        this.invaders.forEach(function (enemy) {\n            // moving to the right\n            enemy.position.x -= outOfBoundsBy;\n            enemy.reverse();\n            enemy.position.y += 10;\n        });\n    }\n    updateEnemies(elapsedUnit) {\n        let self = this;\n        self.invaders = self.invaders.filter(function (enemy) {\n            return enemy.active;\n        });\n        self.invaders.forEach(function (enemy) {\n            enemy.update(elapsedUnit); // this might move things out of bounds so check next\n            //  self.clamp(enemy)\n        });\n        self.ReverseEnemyDirectionIfOutOfBoundsAndDropDown();\n        self.invaders.forEach(function (invader) {\n            if (Math.random() < invader.probabilityOfShooting) {\n                self.invaderBullets = self.invaderBullets.concat(invader.shootAhead());\n            }\n        });\n    }\n    updateBullets(elapsedUnit) {\n        this.playerBullets = this.playerBullets.filter(function (bullet) {\n            return bullet.active;\n        });\n        this.playerBullets.forEach(function (bullet) {\n            bullet.update(elapsedUnit);\n        });\n        this.invaderBullets = this.invaderBullets.filter(function (bullet) {\n            return bullet.active;\n        });\n        this.invaderBullets.forEach(function (bullet) {\n            bullet.update(elapsedUnit);\n        });\n    }\n    handleCollisions() {\n        let self = this;\n        self.playerBullets.forEach(function (bullet) {\n            self.invaders.forEach(function (invader) {\n                if (CollisionDetection_1.rectCollides(bullet, invader)) {\n                    invader.takeHit(bullet);\n                    bullet.active = false;\n                }\n            });\n            self.bases.forEach(function (base) {\n                base.allDestructibleScenery.forEach(function (particle) {\n                    if (CollisionDetection_1.rectCollides(bullet, particle)) {\n                        particle.explode();\n                        bullet.active = false;\n                    }\n                });\n            });\n        });\n        self.invaderBullets.forEach(function (bullet) {\n            if (CollisionDetection_1.rectCollides(bullet, self.player)) {\n                self.player.takeDamage(bullet);\n                let postionCopy = JSON.parse(JSON.stringify(self.player.position));\n                bullet.active = false;\n            }\n            self.bases.forEach(function (base) {\n                base.allDestructibleScenery.forEach(function (particle) {\n                    if (CollisionDetection_1.rectCollides(bullet, particle)) {\n                        particle.explode();\n                        bullet.active = false;\n                    }\n                });\n            });\n        });\n    }\n    gameOver() {\n        alert('you lose!');\n    }\n    clamp(item) {\n        if (item.position.x < 0) {\n            item.position.x = 0;\n            return;\n        }\n        else if (item.position.x > (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width)) {\n            item.position.x = SpaceInvaders.CANVAS_WIDTH - item.dimensions.width;\n            return;\n        }\n        else if (item.position.y < 0) {\n            item.position.y = 0;\n            return;\n        }\n        else if (item.position.y > (SpaceInvaders.CANVAS_HEIGHT - item.dimensions.height)) {\n            item.position.y = SpaceInvaders.CANVAS_HEIGHT - item.dimensions.height;\n            return;\n        }\n    }\n}\nSpaceInvaders.ASPECT_RATIO = 1; // keep it square for now\nSpaceInvaders.CANVAS_WIDTH = 600;\nSpaceInvaders.CANVAS_HEIGHT = SpaceInvaders.CANVAS_WIDTH / SpaceInvaders.ASPECT_RATIO;\nSpaceInvaders.gameState = GameStates_1.INITIALISING;\nSpaceInvaders.score = 0;\nexports.SpaceInvaders = SpaceInvaders;\n","import {SpaceInvaders} from './src/SpaceInvaders'\n\n  // this is where everything starts\nlet game = new SpaceInvaders(document.querySelector('#canvas'))\n\n// game.handleCollisions.bind(game)\nwindow.addEventListener('keydown', (game.onKeyDown.bind(game)))\nwindow.addEventListener('keyup', (game.onKeyUp.bind(game)))\n\nfunction gameLoop () {\n  requestAnimationFrame(gameLoop)\n  // Drawing code goes here\n  game.update()\n}\n\ngameLoop()\n"]}