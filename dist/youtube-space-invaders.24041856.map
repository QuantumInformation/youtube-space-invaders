{"version":3,"sources":["src/util/Vectors.ts","src/constants/GameSettings.ts","src/gameObjects/Bullets.ts","src/constants/GameStates.ts","src/gameObjects/Player.ts","src/constants/Keycodes.ts","src/util/Canvas2D_tools.ts","src/gameObjects/AbstractInvader.ts","src/util/Conversions.ts","src/gameObjects/Invaders.ts","src/util/MathChecks.ts","src/util/Formations.ts","src/story/WaveManager.ts","src/util/CollisionDetection.ts","src/gameObjects/PlayerBase.ts","src/SpaceInvaders.ts","index.js"],"names":["Object","defineProperty","exports","value","Dimensions2","width","height","Vector2","x","y","otherVector","Math","sqrt","pow","atan2","degreesToRadians","radians","newAngleRads","mag","magnitude","sin","cos","Vector2Normalised","degrees","PI","radiansToDegress","getFanSpreadVectors","numberOfBullets","spreadAngleRadians","arr","angleGap","startingAngle","i","nextAngle","push","GAME_SPEED","VERY_SLOW_MOVEMENT_SPEED","SLOW_MOVEMENT_SPEED","MEDIUM_MOVEMENT_SPEED","FAST_MOVEMENT_SPEED","VERY_FAST_MOVEMENT_SPEED","MEDIUM_FONT_SIZE","LARGE_FONT_SIZE","SpaceInvaders_1","require","Vectors_1","GameSettings","Bullet","position","directionVector","active","dimensions","SpaceInvaders","CANVAS_WIDTH","CANVAS_HEIGHT","SMALL_SIZE","LARGE_SIZE","BasicBullet","color","damageInflicted","canvas","fillStyle","fillRect","elapsedUnit","inBounds","INITIALISING","GAME_OVER","BATTLE_MODE","YOU_WIN","Bullets_1","GameSettings_1","GameStates_1","Player","DEFAULT_WIDTH","DEFAULT_HEIGHT","health","lastShotTime","fireRatePerSec","context2D","drawImage","img","gameState","myAudio","document","createElement","timeDifference","Date","getTime","midpoint","bullet","explode","Image","src","KEY_CODES","RETURN","ESC","SPACE","LEFT","UP","RIGHT","DOWN","ZERO","ONE","TWO","GameMath","rotateAndPaintImage","context","image","angleInDegrees","positionX","positionY","axisX","axisY","angleInRadians","translate","rotate","Canvas2D_tools_1","AbstractInvader","probabilityOfShooting","rotationInDegrees","facingAngleRad","ctx","score","pointsValue","AbstractInvader_1","Conversions_1","LightInvader","MediumInvader","HeavyInvader","self","random","vectors","bulletsToFire","forEach","b","item","angle","isSquare","n","MathChecks_1","triangle","gameObjects","horizontalGap","verticalGap","length","Error","numberOfRows","nextRowOffset","thisRowStartingIndex","numberOnThisRow","maxHeight","j","go","addTwo","rectangle","itemsPerRow","Invaders_1","Formations_1","WaveManager","waves","currentWave","generateWaves","nextWave","initialXOffset","initialYOffset","units","unit","updateDirection","rectCollides","a","DestructibleScenery","DEFAULT_SIZE","PlayerBase","requestedDimensions","allDestructibleScenery","numberPerRow","floor","numberPerColumn","actualDimensions","nextPosition","draw","add","Player_1","Keycodes_1","WaveManager_1","CollisionDetection_1","PlayerBase_1","hostElement","waveManager","playerOffsetHeight","playerBullets","bases","invaderBullets","background","spaceColor","keyStatus","lastFrame","getContext","ASPECT_RATIO","code","initGame","start","elapsedTime","elapsedReduced","drawBackground","drawInit","drawYouWin","drawGameOver","updatePlayer","updateEnemies","updateBullets","updateBases","handleCollisions","invaders","getNextWave","drawBattleScene","noOfBases","containedWithinDimensions","edgeSpace","freeSpace","spaceBetween","nextPos","transform","font","fillText","evt","keyCode","player","createBases","base","filter","particle","drawScore","thing","remainStationary","shootAhead","update","clamp","outOfBoundsBy","enemy","reverse","ReverseEnemyDirectionIfOutOfBoundsAndDropDown","invader","concat","takeHit","takeDamage","postionCopy","JSON","parse","stringify","alert","game","querySelector","window","addEventListener","onKeyDown","bind","onKeyUp","gameLoop","requestAnimationFrame"],"mappings":"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","file":"youtube-space-invaders.24041856.map","sourceRoot":"..","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Dimensions2 {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n}\nexports.Dimensions2 = Dimensions2;\nclass Vector2 {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    add(otherVector) {\n        return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n    }\n    addTwo(x, y) {\n        return new Vector2(this.x + x, this.y + y);\n    }\n    reverse() {\n        return new Vector2(-this.x, -this.y);\n    }\n    magnitude() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n    angle() {\n        return Math.atan2(this.y, this.x) - degreesToRadians(-90);\n    }\n    /**\n     * returns a new vector based on the current one rotated by an angle\n     * @param initialVector\n     * @param rotatingDegrees\n     * @returns {Vector2}\n     */\n    rotateBy(radians) {\n        let newAngleRads = Math.atan2(this.x, this.y) + radians;\n        let mag = this.magnitude();\n        return new Vector2(mag * Math.sin(newAngleRads), mag * Math.cos(newAngleRads));\n    }\n}\nexports.Vector2 = Vector2;\nclass Vector2Normalised extends Vector2 {\n    constructor(radians) {\n        super(Math.sin(radians), -Math.cos(radians));\n    }\n}\nexports.Vector2Normalised = Vector2Normalised;\nfunction degreesToRadians(degrees) {\n    return (degrees / 360) * 2 * Math.PI;\n}\nexports.degreesToRadians = degreesToRadians;\nfunction radiansToDegress(radians) {\n    return (radians * 360) / (2 * Math.PI);\n}\nexports.radiansToDegress = radiansToDegress;\n/**\n * Returns array of vectors equally spaced measured from both sidesfor the x origin in normal maths xy chart\n * the shooter will then modify based on its rotation of the firing gun\n */\nfunction getFanSpreadVectors(numberOfBullets, spreadAngleRadians) {\n    let arr = [];\n    let angleGap = spreadAngleRadians / numberOfBullets;\n    let startingAngle = spreadAngleRadians / 2;\n    for (let i = 0; i < numberOfBullets; i++) {\n        let nextAngle = startingAngle - i * angleGap;\n        arr.push(new Vector2Normalised(nextAngle));\n    }\n    return arr;\n}\nexports.getFanSpreadVectors = getFanSpreadVectors;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GAME_SPEED = 50; // the higher the number the faster the game will run, all movemments are effected by this number\nexports.VERY_SLOW_MOVEMENT_SPEED = 1;\nexports.SLOW_MOVEMENT_SPEED = 2;\nexports.MEDIUM_MOVEMENT_SPEED = 4;\nexports.FAST_MOVEMENT_SPEED = 6;\nexports.VERY_FAST_MOVEMENT_SPEED = 12;\nexports.MEDIUM_FONT_SIZE = 14;\nexports.LARGE_FONT_SIZE = 20;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SpaceInvaders_1 = require(\"../SpaceInvaders\");\nconst Vectors_1 = require(\"../util/Vectors\");\nconst GameSettings = require(\"../constants/GameSettings\");\nclass Bullet {\n    constructor(position, directionVector) {\n        this.position = position;\n        this.active = true;\n        this.directionVector = directionVector;\n    }\n    inBounds() {\n        return this.position.x >= 0 && (this.position.x - this.dimensions.width <= SpaceInvaders_1.SpaceInvaders.CANVAS_WIDTH) &&\n            this.position.y >= 0 && (this.position.y - this.dimensions.height <= SpaceInvaders_1.SpaceInvaders.CANVAS_HEIGHT);\n    }\n}\nBullet.SMALL_SIZE = 3;\nBullet.LARGE_SIZE = 9;\nexports.Bullet = Bullet;\nclass BasicBullet extends Bullet {\n    constructor(position, directionVector) {\n        super(position, directionVector);\n        this.position = position;\n        this.dimensions = new Vectors_1.Dimensions2(Bullet.SMALL_SIZE, Bullet.SMALL_SIZE);\n        this.color = 'white';\n        this.damageInflicted = 1;\n    }\n    draw(canvas) {\n        canvas.fillStyle = this.color;\n        canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n    }\n    update(elapsedUnit) {\n        this.position.x += this.directionVector.x * elapsedUnit * GameSettings.MEDIUM_MOVEMENT_SPEED;\n        this.position.y += this.directionVector.y * elapsedUnit * GameSettings.MEDIUM_MOVEMENT_SPEED;\n        this.active = this.active && this.inBounds();\n    }\n}\nexports.BasicBullet = BasicBullet;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INITIALISING = 'INITIALISING';\nexports.GAME_OVER = 'GAME_OVER';\nexports.BATTLE_MODE = 'BATTLE_MODE';\nexports.YOU_WIN = 'YOU_WIN';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Bullets_1 = require(\"./Bullets\");\nconst GameSettings_1 = require(\"../constants/GameSettings\");\nconst GameStates_1 = require(\"../constants/GameStates\");\nconst SpaceInvaders_1 = require(\"../SpaceInvaders\");\nclass Player {\n    constructor(position) {\n        this.color = '#0FF';\n        this.dimensions = new Vectors_1.Dimensions2(Player.DEFAULT_WIDTH, Player.DEFAULT_HEIGHT);\n        this.health = 3;\n        this.lastShotTime = 0;\n        this.fireRatePerSec = 4;\n        this.directionVector = new Vectors_1.Vector2(0, 0);\n        this.position = position;\n    }\n    draw(context2D) {\n        context2D.drawImage(img, this.position.x, this.position.y);\n    }\n    update(elapsedUnit) {\n        this.position.x += this.directionVector.x * elapsedUnit * GameSettings_1.MEDIUM_MOVEMENT_SPEED;\n        this.position.y += this.directionVector.y * elapsedUnit * GameSettings_1.MEDIUM_MOVEMENT_SPEED;\n    }\n    midpoint() {\n        return new Vectors_1.Vector2(this.position.x + this.dimensions.width / 2, this.position.y + this.dimensions.height / 2);\n    }\n    explode() {\n        SpaceInvaders_1.SpaceInvaders.gameState = GameStates_1.GAME_OVER;\n        let myAudio = document.createElement('audio');\n        // todo\n        // myAudio.src = require('file?name=playerExplosion.mp3!../audio/playerExplosion.mp3')\n        // myAudio.play()\n    }\n    shootAhead() {\n        // todo Sound.play('shoot')\n        let timeDifference = new Date().getTime() - this.lastShotTime;\n        if (timeDifference > (1000 / this.fireRatePerSec)) {\n            this.lastShotTime = new Date().getTime();\n            return new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2Normalised(0));\n        }\n        else {\n            return null;\n        }\n    }\n    updateDirection(directionVector) {\n        this.directionVector = directionVector;\n    }\n    remainStationary() {\n        this.directionVector.x = 0;\n        this.directionVector.y = 0;\n    }\n    takeDamage(bullet) {\n        this.health -= bullet.damageInflicted;\n        if (this.health <= 0) {\n            this.explode();\n        }\n    }\n}\nPlayer.DEFAULT_HEIGHT = 30;\nPlayer.DEFAULT_WIDTH = 60;\nexports.Player = Player;\nlet img = new Image();\nimg.src = require('../images/player.svg');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KEY_CODES = {\n    RETURN: 13,\n    ESC: 27,\n    SPACE: 32,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    ZERO: 48,\n    ONE: 49,\n    TWO: 50\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GameMath = require(\"./Vectors\");\nfunction rotateAndPaintImage(context, image, angleInDegrees, positionX, positionY, axisX, axisY) {\n    let angleInRadians = GameMath.degreesToRadians(angleInDegrees);\n    context.translate(positionX, positionY);\n    context.rotate(angleInRadians);\n    context.drawImage(image, -axisX, -axisY);\n    context.rotate(-angleInRadians);\n    context.translate(-positionX, -positionY);\n}\nexports.rotateAndPaintImage = rotateAndPaintImage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Bullets_1 = require(\"./Bullets\");\nconst GameSettings = require(\"../constants/GameSettings\");\nconst SpaceInvaders_1 = require(\"../SpaceInvaders\");\nconst Canvas2D_tools_1 = require(\"../util/Canvas2D_tools\");\nclass AbstractInvader {\n    constructor(position) {\n        this.position = position;\n        this.health = 1;\n        this.dimensions = new Vectors_1.Dimensions2(AbstractInvader.DEFAULT_WIDTH, AbstractInvader.DEFAULT_HEIGHT);\n        this.active = true;\n        this.probabilityOfShooting = 0.0005; // on each game frame\n        this.rotationInDegrees = 180; // todo this will change\n        this.image = new Image();\n        this.directionVector = new Vectors_1.Vector2(0, 0);\n        this.facingAngleRad = Math.PI; // pointing down for now\n    }\n    draw(ctx) {\n        Canvas2D_tools_1.rotateAndPaintImage(ctx, this.image, 180, this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n    }\n    midpoint() {\n        return new Vectors_1.Vector2(this.position.x + this.dimensions.width / 2, this.position.y + this.dimensions.height / 2);\n    }\n    explode() {\n        this.active = false;\n        SpaceInvaders_1.SpaceInvaders.score += this.pointsValue;\n        // todo boom graphic\n    }\n    reverse() {\n        this.directionVector.x = -this.directionVector.x;\n        this.directionVector.y = -this.directionVector.y;\n        // todo boom graphic\n    }\n    updateDirection(directionVector) {\n        this.directionVector = directionVector;\n    }\n    update(elapsedUnit) {\n        this.position.x += this.directionVector.x * elapsedUnit * GameSettings.VERY_SLOW_MOVEMENT_SPEED;\n    }\n    shootAhead() {\n        // todo Sound.play('shoot')\n        return [new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2(0, 1))];\n    }\n    takeHit(bullet) {\n        this.health -= bullet.damageInflicted;\n        if (this.health <= 0) {\n            this.explode();\n        }\n    }\n}\nAbstractInvader.DEFAULT_HEIGHT = 20;\nAbstractInvader.DEFAULT_WIDTH = 30;\nexports.AbstractInvader = AbstractInvader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction degreesToRadians(degrees) {\n    return (degrees / 360) * 2 * Math.PI;\n}\nexports.degreesToRadians = degreesToRadians;\nfunction radiansToDegress(radians) {\n    return (radians * 360) / (2 * Math.PI);\n}\nexports.radiansToDegress = radiansToDegress;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Bullets_1 = require(\"./Bullets\");\nconst AbstractInvader_1 = require(\"./AbstractInvader\");\nconst Conversions_1 = require(\"../util/Conversions\");\nclass LightInvader extends AbstractInvader_1.AbstractInvader {\n    constructor(position = new Vectors_1.Vector2(0, 0)) {\n        super(position);\n        this.probabilityOfShooting = 0.001;\n        this.health = 1;\n        this.pointsValue = 10;\n        this.image.src = require('../images/lightInvader.svg');\n    }\n}\nexports.LightInvader = LightInvader;\nclass MediumInvader extends AbstractInvader_1.AbstractInvader {\n    constructor(position = new Vectors_1.Vector2(0, 0)) {\n        super(position);\n        this.probabilityOfShooting = 0.002;\n        this.health = 3;\n        this.pointsValue = 30;\n        this.image.src = require('../images/MediumInvader.svg');\n    }\n}\nexports.MediumInvader = MediumInvader;\nclass HeavyInvader extends AbstractInvader_1.AbstractInvader {\n    constructor(position = new Vectors_1.Vector2(0, 0)) {\n        super(position);\n        this.probabilityOfShooting = 0.004;\n        this.pointsValue = 60;\n        this.health = 5;\n        this.image.src = require('../images/HeavyInvader.svg');\n    }\n    shootAhead() {\n        // todo Sound.play('shoot')\n        let self = this;\n        let x = Math.random();\n        if (x >= 0 && x <= 0.75) {\n            return [new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2Normalised(0))];\n        }\n        else {\n            let vectors = Vectors_1.getFanSpreadVectors(10, Conversions_1.degreesToRadians(45));\n            let bulletsToFire = [];\n            vectors.forEach(item => {\n                let b = new Bullets_1.BasicBullet(this.midpoint(), new Vectors_1.Vector2Normalised(this.facingAngleRad + item.angle()));\n                bulletsToFire.push(b);\n            });\n            return bulletsToFire;\n        }\n    }\n}\nexports.HeavyInvader = HeavyInvader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isSquare(n) {\n    return n > 0 && Math.sqrt(n) % 1 === 0;\n}\nexports.isSquare = isSquare;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MathChecks_1 = require(\"./MathChecks\");\nconst Vectors_1 = require(\"./Vectors\");\n/**\n * modifys an array of objects so their position is in a triangle\n *\n * let row number = n\n * each row contains (n*2)-1\n *\n * total rows = n^2\n * must be a perfect square of units\n * we render each unit from the bottom left\n *\n * looks like:\n *     1\n *    111\n *   11111\n *  1111111\n *\n * @param gameObjects\n */\nfunction triangle(gameObjects, horizontalGap, verticalGap) {\n    if (!MathChecks_1.isSquare(gameObjects.length)) {\n        throw new Error('needs perfect square number of units');\n    }\n    let numberOfRows = Math.sqrt(gameObjects.length);\n    let nextRowOffset = new Vectors_1.Vector2(0, 0);\n    let thisRowStartingIndex = 0;\n    for (let i = numberOfRows; i >= 1; i--) {\n        let numberOnThisRow = (i * 2) - 1;\n        let maxHeight = 0;\n        for (let j = 0; j < numberOnThisRow; j++) {\n            let go = gameObjects[thisRowStartingIndex + j];\n            if (go.dimensions.height > maxHeight) {\n                maxHeight = go.dimensions.height;\n            }\n            go.position = new Vectors_1.Vector2(j * (go.dimensions.width + horizontalGap) + nextRowOffset.x, nextRowOffset.y);\n        }\n        nextRowOffset = nextRowOffset.addTwo(gameObjects[thisRowStartingIndex].dimensions.width + horizontalGap, maxHeight + verticalGap);\n        thisRowStartingIndex = thisRowStartingIndex + numberOnThisRow;\n    }\n}\nexports.triangle = triangle;\nfunction rectangle(gameObjects, itemsPerRow, horizontalGap, verticalGap) {\n    let numberOfRows = gameObjects.length / itemsPerRow;\n    if (numberOfRows % 1 !== 0) {\n        throw new Error('number / itemsPerRow must fit');\n    }\n    let nextRowOffset = new Vectors_1.Vector2(0, 0);\n    let thisRowStartingIndex = 0;\n    for (let i = 0; i < numberOfRows; i++) {\n        let maxHeight = 0;\n        for (let j = 0; j < itemsPerRow; j++) {\n            let go = gameObjects[thisRowStartingIndex + j];\n            if (go.dimensions.height > maxHeight) {\n                maxHeight = go.dimensions.height;\n            }\n            go.position = new Vectors_1.Vector2(j * (go.dimensions.width + horizontalGap) + nextRowOffset.x, nextRowOffset.y);\n        }\n        nextRowOffset = nextRowOffset.addTwo(0, maxHeight + verticalGap);\n        thisRowStartingIndex = thisRowStartingIndex + itemsPerRow;\n    }\n}\nexports.rectangle = rectangle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Invaders_1 = require(\"../gameObjects/Invaders\");\nconst Vectors_1 = require(\"../util/Vectors\");\nconst Formations_1 = require(\"../util/Formations\");\nclass WaveManager {\n    constructor() {\n        this.waves = [];\n        this.currentWave = 0;\n        this.generateWaves();\n    }\n    getNextWave() {\n        let nextWave = this.waves[this.currentWave];\n        if (nextWave) {\n            this.currentWave++;\n            return nextWave();\n        }\n        return null;\n    }\n    generateWaves() {\n        let horizontalGap = 15;\n        let verticalGap = 20;\n        let initialXOffset = 20;\n        let initialYOffset = 20;\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.rectangle(units, 4, horizontalGap, verticalGap);\n            return units;\n        });\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader(), new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.rectangle(units, 8, horizontalGap, verticalGap);\n            return units;\n        });\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.MediumInvader(), new Invaders_1.MediumInvader(), new Invaders_1.MediumInvader(),\n                new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.triangle(units, horizontalGap, verticalGap);\n            return units;\n        });\n        this.waves.push(function () {\n            let units = [\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.HeavyInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader(), new Invaders_1.MediumInvader(), new Invaders_1.LightInvader(),\n                new Invaders_1.LightInvader()\n            ];\n            units.forEach(unit => {\n                unit.updateDirection(new Vectors_1.Vector2Normalised(90));\n            });\n            Formations_1.triangle(units, horizontalGap, verticalGap);\n            return units;\n        });\n    }\n}\nexports.WaveManager = WaveManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction rectCollides(a, b) {\n    return a.position.x < b.position.x + b.dimensions.width &&\n        a.position.x + a.dimensions.width > b.position.x &&\n        a.position.y < b.position.y + b.dimensions.height &&\n        a.position.y + a.dimensions.height > b.position.y;\n}\nexports.rectCollides = rectCollides;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Vectors_1 = require(\"../util/Vectors\");\nclass DestructibleScenery {\n    constructor(position) {\n        this.dimensions = new Vectors_1.Dimensions2(DestructibleScenery.DEFAULT_SIZE, DestructibleScenery.DEFAULT_SIZE);\n        this.color = '#0F9';\n        this.active = true;\n        this.position = position;\n    }\n    draw(canvas) {\n        canvas.fillStyle = this.color;\n        if (this.active) {\n            canvas.fillRect(this.position.x, this.position.y, this.dimensions.width, this.dimensions.height);\n        }\n    }\n    // tslint:disable-next-line\n    update(elapsedUnit) {\n    }\n    explode() {\n        this.active = false;\n        // todo boom graphic\n    }\n}\nDestructibleScenery.DEFAULT_SIZE = 5;\nexports.DestructibleScenery = DestructibleScenery;\n/**\n * The classic Green protective bases the player can hide behind\n */\nclass PlayerBase {\n    constructor(requestedDimensions) {\n        this.requestedDimensions = requestedDimensions;\n        this.allDestructibleScenery = [];\n        let numberPerRow = Math.floor(requestedDimensions.x / DestructibleScenery.DEFAULT_SIZE);\n        let numberPerColumn = Math.floor(requestedDimensions.y / DestructibleScenery.DEFAULT_SIZE);\n        this.actualDimensions = new Vectors_1.Vector2(numberPerRow * DestructibleScenery.DEFAULT_SIZE, numberPerColumn * DestructibleScenery.DEFAULT_SIZE);\n        let nextPosition;\n        // just rectangular bases to start with\n        // todo mask values to give shapes like the original space invaders bases\n        for (let i = 0; i < numberPerRow; i++) {\n            nextPosition = new Vectors_1.Vector2(DestructibleScenery.DEFAULT_SIZE * i, 0);\n            for (let j = 0; j < numberPerColumn; j++) {\n                nextPosition = nextPosition.addTwo(0, DestructibleScenery.DEFAULT_SIZE);\n                this.allDestructibleScenery.push(new DestructibleScenery(nextPosition));\n            }\n        }\n    }\n    draw(canvas) {\n        let self = this;\n        self.allDestructibleScenery.forEach(function (item) {\n            item.draw(canvas);\n        });\n    }\n    transform(position) {\n        this.allDestructibleScenery.forEach(function (item) {\n            item.position = item.position.add(position);\n        });\n    }\n}\nexports.PlayerBase = PlayerBase;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Player_1 = require(\"./gameObjects/Player\");\nconst Vectors_1 = require(\"./util/Vectors\");\nconst Keycodes_1 = require(\"./constants/Keycodes\");\nconst GameSettings = require(\"./constants/GameSettings\");\nconst GameStates_1 = require(\"./constants/GameStates\");\nconst WaveManager_1 = require(\"./story/WaveManager\");\nconst CollisionDetection_1 = require(\"./util/CollisionDetection\");\nconst Conversions_1 = require(\"./util/Conversions\");\nconst PlayerBase_1 = require(\"./gameObjects/PlayerBase\");\nclass SpaceInvaders {\n    /**\n     * Basically we figure out the best width for our canvas at start up.\n     */\n    constructor(hostElement) {\n        this.waveManager = new WaveManager_1.WaveManager();\n        this.playerOffsetHeight = 20;\n        this.playerBullets = [];\n        this.bases = [];\n        this.invaderBullets = [];\n        this.background = new Image();\n        this.spaceColor = 'black';\n        this.keyStatus = {};\n        this.lastFrame = new Date().getTime();\n        this.canvas = hostElement;\n        new Date().getTime();\n        this.context2D = this.canvas.getContext('2d');\n        this.canvas.width = SpaceInvaders.CANVAS_WIDTH;\n        this.canvas.height = this.canvas.width / SpaceInvaders.ASPECT_RATIO;\n        this.background.src = require('./images/backgrounds/sunrise.jpg');\n        // all keys are down to start\n        for (let code in Keycodes_1.KEY_CODES) {\n            this.keyStatus[Keycodes_1.KEY_CODES[code]] = false;\n        }\n        this.initGame();\n    }\n    update() {\n        let start = new Date().getTime();\n        let elapsedTime = start - this.lastFrame;\n        // get the current time as seconds then multiple by the game speed to get a sensible number for multiplying velocities per frame\n        let elapsedReduced = (elapsedTime / 1000.0) * GameSettings.GAME_SPEED;\n        this.drawBackground();\n        switch (SpaceInvaders.gameState) {\n            case GameStates_1.INITIALISING:\n                this.drawInit();\n                return;\n            case GameStates_1.YOU_WIN:\n                this.drawYouWin();\n                return;\n            case GameStates_1.GAME_OVER:\n                this.drawGameOver();\n                return;\n        }\n        // battle mode\n        this.updatePlayer(elapsedReduced);\n        this.updateEnemies(elapsedReduced);\n        this.updateBullets(elapsedReduced);\n        this.updateBases();\n        this.handleCollisions();\n        if (this.invaders.length === 0) {\n            this.invaders = this.waveManager.getNextWave();\n            if (!this.invaders) {\n                SpaceInvaders.gameState = GameStates_1.YOU_WIN;\n                return;\n            }\n        }\n        this.drawBattleScene();\n        this.lastFrame = start;\n    }\n    /**\n     * We want equally spaced bases  like this:\n     *\n     *\n     * |                                        |\n     * |                                        |\n     * |                                        |\n     * |                                        |\n     * |     ###           ###          ###     |\n     * |                                        |\n     * |                                        |\n     * |                                        |\n     *\n     */\n    createBases(noOfBases, containedWithinDimensions, edgeSpace = 40) {\n        let bases = []; // clear old one if there\n        for (let i = 0; i < noOfBases; i++) {\n            this.bases.push(new PlayerBase_1.PlayerBase(containedWithinDimensions));\n        }\n        let freeSpace = SpaceInvaders.CANVAS_WIDTH - edgeSpace * 2 - noOfBases * this.bases[0].actualDimensions.x;\n        let spaceBetween = freeSpace / (noOfBases - 1);\n        // assume that all bases are same size\n        for (let i = 0; i < noOfBases; i++) {\n            let nextPos = new Vectors_1.Vector2(i * (this.bases[0].actualDimensions.x + spaceBetween) + edgeSpace, 500);\n            this.bases[i].transform(nextPos);\n        }\n    }\n    drawInit() {\n        this.context2D.fillStyle = '#0FF';\n        this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText('Loading..', 5, 25);\n        SpaceInvaders.gameState = GameStates_1.BATTLE_MODE;\n    }\n    drawGameOver() {\n        this.context2D.fillStyle = '#F00';\n        this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText('SpaceInvaders over!', 5, 25);\n    }\n    drawYouWin() {\n        this.context2D.fillStyle = '#FF0';\n        this.context2D.font = GameSettings.LARGE_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText('YOU win!', 5, 25);\n    }\n    onKeyDown(evt) {\n        this.keyStatus[evt.keyCode] = true;\n    }\n    onKeyUp(evt) {\n        this.keyStatus[evt.keyCode] = false;\n    }\n    initGame() {\n        // bottom middle\n        this.player = new Player_1.Player(new Vectors_1.Vector2(SpaceInvaders.CANVAS_WIDTH / 2, this.canvas.height - this.playerOffsetHeight - Player_1.Player.DEFAULT_HEIGHT));\n        this.invaders = this.waveManager.getNextWave();\n        this.createBases(3, new Vectors_1.Vector2(100, 30));\n    }\n    /**\n     * Remove scenery that has been hit\n     */\n    updateBases() {\n        let self = this;\n        self.bases.forEach(function (base) {\n            base.allDestructibleScenery = base.allDestructibleScenery.filter(function (particle) {\n                return particle.active;\n            });\n        });\n    }\n    drawBackground() {\n        this.context2D.fillStyle = this.spaceColor;\n        this.context2D.fillRect(0, 0, SpaceInvaders.CANVAS_WIDTH, SpaceInvaders.CANVAS_HEIGHT);\n        this.context2D.drawImage(this.background, -200, 0);\n    }\n    drawScore() {\n        this.context2D.fillStyle = '#0FF';\n        this.context2D.font = GameSettings.MEDIUM_FONT_SIZE + 'px Verdana';\n        this.context2D.fillText(`Score: ${SpaceInvaders.score}`, 2, 14);\n        this.context2D.fillText(`Health: ${this.player.health}`, 2, SpaceInvaders.CANVAS_HEIGHT - 6);\n    }\n    drawBattleScene() {\n        this.drawScore();\n        let self = this;\n        this.invaders.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.playerBullets.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.invaderBullets.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.bases.forEach(function (thing) {\n            thing.draw(self.context2D);\n        });\n        this.player.draw(this.context2D);\n    }\n    updatePlayer(elapsedTime) {\n        if (this.keyStatus[Keycodes_1.KEY_CODES.LEFT]) {\n            if (this.keyStatus[Keycodes_1.KEY_CODES.UP]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(305)));\n            }\n            else if (this.keyStatus[Keycodes_1.KEY_CODES.DOWN]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(225)));\n            }\n            else {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(270)));\n            }\n        }\n        else if (this.keyStatus[Keycodes_1.KEY_CODES.RIGHT]) {\n            if (this.keyStatus[Keycodes_1.KEY_CODES.UP]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(45)));\n            }\n            else if (this.keyStatus[Keycodes_1.KEY_CODES.DOWN]) {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(135)));\n            }\n            else {\n                this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(90)));\n            }\n        }\n        else if (this.keyStatus[Keycodes_1.KEY_CODES.UP]) {\n            this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(0)));\n        }\n        else if (this.keyStatus[Keycodes_1.KEY_CODES.DOWN]) {\n            this.player.updateDirection(new Vectors_1.Vector2Normalised(Conversions_1.degreesToRadians(180)));\n        }\n        else {\n            this.player.remainStationary();\n        }\n        if (this.keyStatus[Keycodes_1.KEY_CODES.SPACE]) {\n            let bullet = this.player.shootAhead();\n            if (bullet) {\n                this.playerBullets.push(bullet);\n            }\n        }\n        this.player.update(elapsedTime);\n        this.clamp(this.player);\n    }\n    ReverseEnemyDirectionIfOutOfBoundsAndDropDown() {\n        let outOfBoundsBy = 0;\n        this.invaders.forEach(item => {\n            if (item.position.x < 0) {\n                outOfBoundsBy = item.position.x;\n                return;\n            }\n            else if (item.position.x > (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width)) {\n                outOfBoundsBy = item.position.x - (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width);\n                return;\n            }\n        });\n        if (outOfBoundsBy === 0) {\n            return;\n        }\n        this.invaders.forEach(function (enemy) {\n            // moving to the right\n            enemy.position.x -= outOfBoundsBy;\n            enemy.reverse();\n            enemy.position.y += 10;\n        });\n    }\n    updateEnemies(elapsedUnit) {\n        let self = this;\n        self.invaders = self.invaders.filter(function (enemy) {\n            return enemy.active;\n        });\n        self.invaders.forEach(function (enemy) {\n            enemy.update(elapsedUnit); // this might move things out of bounds so check next\n            //  self.clamp(enemy)\n        });\n        self.ReverseEnemyDirectionIfOutOfBoundsAndDropDown();\n        self.invaders.forEach(function (invader) {\n            if (Math.random() < invader.probabilityOfShooting) {\n                self.invaderBullets = self.invaderBullets.concat(invader.shootAhead());\n            }\n        });\n    }\n    updateBullets(elapsedUnit) {\n        this.playerBullets = this.playerBullets.filter(function (bullet) {\n            return bullet.active;\n        });\n        this.playerBullets.forEach(function (bullet) {\n            bullet.update(elapsedUnit);\n        });\n        this.invaderBullets = this.invaderBullets.filter(function (bullet) {\n            return bullet.active;\n        });\n        this.invaderBullets.forEach(function (bullet) {\n            bullet.update(elapsedUnit);\n        });\n    }\n    handleCollisions() {\n        let self = this;\n        self.playerBullets.forEach(function (bullet) {\n            self.invaders.forEach(function (invader) {\n                if (CollisionDetection_1.rectCollides(bullet, invader)) {\n                    invader.takeHit(bullet);\n                    bullet.active = false;\n                }\n            });\n            self.bases.forEach(function (base) {\n                base.allDestructibleScenery.forEach(function (particle) {\n                    if (CollisionDetection_1.rectCollides(bullet, particle)) {\n                        particle.explode();\n                        bullet.active = false;\n                    }\n                });\n            });\n        });\n        self.invaderBullets.forEach(function (bullet) {\n            if (CollisionDetection_1.rectCollides(bullet, self.player)) {\n                self.player.takeDamage(bullet);\n                let postionCopy = JSON.parse(JSON.stringify(self.player.position));\n                bullet.active = false;\n            }\n            self.bases.forEach(function (base) {\n                base.allDestructibleScenery.forEach(function (particle) {\n                    if (CollisionDetection_1.rectCollides(bullet, particle)) {\n                        particle.explode();\n                        bullet.active = false;\n                    }\n                });\n            });\n        });\n    }\n    gameOver() {\n        alert('you lose!');\n    }\n    clamp(item) {\n        if (item.position.x < 0) {\n            item.position.x = 0;\n            return;\n        }\n        else if (item.position.x > (SpaceInvaders.CANVAS_WIDTH - item.dimensions.width)) {\n            item.position.x = SpaceInvaders.CANVAS_WIDTH - item.dimensions.width;\n            return;\n        }\n        else if (item.position.y < 0) {\n            item.position.y = 0;\n            return;\n        }\n        else if (item.position.y > (SpaceInvaders.CANVAS_HEIGHT - item.dimensions.height)) {\n            item.position.y = SpaceInvaders.CANVAS_HEIGHT - item.dimensions.height;\n            return;\n        }\n    }\n}\nSpaceInvaders.ASPECT_RATIO = 1; // keep it square for now\nSpaceInvaders.CANVAS_WIDTH = 600;\nSpaceInvaders.CANVAS_HEIGHT = SpaceInvaders.CANVAS_WIDTH / SpaceInvaders.ASPECT_RATIO;\nSpaceInvaders.gameState = GameStates_1.INITIALISING;\nSpaceInvaders.score = 0;\nexports.SpaceInvaders = SpaceInvaders;\n","import {SpaceInvaders} from './src/SpaceInvaders'\n\n  // this is where everything starts\nlet game = new SpaceInvaders(document.querySelector('#canvas'))\n\n// game.handleCollisions.bind(game)\nwindow.addEventListener('keydown', (game.onKeyDown.bind(game)))\nwindow.addEventListener('keyup', (game.onKeyUp.bind(game)))\n\nfunction gameLoop () {\n  requestAnimationFrame(gameLoop)\n  // Drawing code goes here\n  game.update()\n}\n\ngameLoop()\n"]}